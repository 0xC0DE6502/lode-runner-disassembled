crtcAddressRegister =   $fe00
crtcAddressWrite =      $fe01
timer1Lo        =       $fe44
IRB             =       $fe60
DDRB            =       $fe62
OSWORD          =       $fff1
OSBYTE          =       $fff4
OSCLI           =       $fff7

                org     $0900
; 
; ####################################################################
; Lode Runner disassembled (BBC Micro version, main binary LODE1 only)
; Disassembled in 2021 by 0xC0DE (Twitter @0xC0DE6502)
; BeebAsm compatible source
; 
; Original game (c) Broderbund 1983
; 
; BBC Micro version (c) Software Projects 1985
; (http://bbcmicro.co.uk/game.php?id=315)
; ####################################################################
; 
; 
.lrStart
loadAddr=&1900
.main            jmp     startGame

.gameLoop        jsr     initVariables
                jsr     drawLevel
.checkKeys       jsr     readJoystickAndKeys
                jsr     updateEnemies
                jsr     updateHoles
                lda     playerIsDead
                bne     deathSound
                jmp     checkEscapeKey

.deathSound      lda     #$1e                            ;initial pitch = 30
                sta     $70
.fallingPitchLoop lda    $70
                sta     pitch1
                ldx     #<sound1
                ldy     #>sound1
                lda     #$07
                jsr     OSWORD                          ;SOUND
                lda     #$13
                jsr     OSBYTE                          ;*FX19 - wait vsync
                dec     $70
                bpl     fallingPitchLoop
.risingPitch     lda     $70
                sta     pitch1
                ldx     #$ff
.ds_delay        dex
                nop
                bne     ds_delay
                ldx     #<sound1
                ldy     #>sound1
                lda     #$07
                jsr     OSWORD                          ;SOUND
                inc     $70
                lda     $70
                cmp     #$0b
                bne     risingPitch
                lda     #$00
                sta     playerIsDead                    ;mark player as alive
                dec     lives                           ;but lose a life
                bne     gameLoop
                lda     #$07                            ;no more lives, game over, print rectangle in middle of screen "GAME OVER"
                sta     xBlockPos
                lda     #$06
                sta     yBlockPos
                lda     #$02
                sta     textColour
                lda     #$0d                            ;14 columns to print, message is printed in columns not in rows
                sta     $74
.nextColumnGameOverMsg lda #$1c
                jsr     printAlphaNum                   ;print space
                dec     xBlockPos
                inc     yBlockPos
                ldy     $74
                lda     revEncStrGameOver,y
                jsr     printAlphaNum                   ;print one char from GAME OVER string
                dec     xBlockPos
                inc     yBlockPos
                lda     #$1c
                jsr     printAlphaNum                   ;print space
                dec     yBlockPos
                dec     yBlockPos
                dec     $74
                bpl     nextColumnGameOverMsg
.waitForRETURNOrFIRE jsr readJoystickAndKeys
                lda     keysPressed
                and     #$10                            ;check RETURN or FIRE pressed
                beq     waitForRETURNOrFIRE
                jmp     startGame

.checkEscapeKey  ldx     #$f0                            ;key code for ESCAPE (eor &80)
                lda     #$79
                jsr     OSBYTE                          ;keyboard scan
                cpx     #$00
                bpl     checkLevelComplete              ;ESCAPE was not pressed
                jmp     startGame                       ;restart game from menu

.checkLevelComplete lda  playerYBlockPos
                bne     checkPlaySoundGold              ;player must exit level at very top of the screen
                lda     playerYBlkInternalDecimalOffset
                bne     checkPlaySoundGold              ;and must be exactly vertically aligned to top block
                lda     allGoldCollected
                beq     checkPlaySoundGold              ;and all gold ingots must have been collected first
                lda     #$00
                sta     allGoldCollected
                sta     $82
.loopLevelComplete ldx   $82
                cpx     #$0f
                bne     playSoundAndScoreLevelComplete
                inc     lives                           ;extra live for completing the level
                inc     level                           ;next level
                lda     level
                cmp     #$29                            ;reached level 40 (last)?
                bne     startLevel
                lda     #$01
                sta     level                           ;reset to level 1
                jsr     clearScreen
                jsr     loadLevels                      ;load next batch of 40 levels from tape // &&&& not going to work in disc version when DFS is overwritten
.startLevel      jmp     gameLoop

.playSoundAndScoreLevelComplete lda soundPitchValuesLevelComplete,x
                sta     pitch2
                lda     #$01
                sta     pitch2+2                        ;duration
                lda     #$07
                ldx     #<sound2
                ldy     #>sound2
                jsr     OSWORD                          ;SOUND
                inc     $82
                ldx     #$50
                ldy     #$01
                jsr     addYXtoScoreBCD                 ;score+=150
                jmp     loopLevelComplete

.checkPlaySoundGold ldx  soundIndexGold
                beq     checkPlaySoundAllGold           ;done playing the sound for collecting a gold ingot
                lda     soundPitchValuesForGold,x
                sta     pitch3
                lda     #$07
                ldx     #<sound3
                ldy     #>sound3
                jsr     OSWORD                          ;SOUND
                dec     soundIndexGold
                jmp     checkHoleDigging

.checkPlaySoundAllGold lda playingSoundAllGold
                beq     checkHoleDigging                ;done playing the sound for collecting all the gold ingots
                ldx     soundIndexAllGold
                lda     soundPitchValuesAllGold,x
                sta     pitch2
                lda     soundDurationValuesAllGold,x
                sta     pitch2+2                        ;duration
                lda     #$07
                ldx     #<sound2
                ldy     #>sound2
                jsr     OSWORD                          ;SOUND
                inc     soundIndexAllGold
                lda     soundIndexAllGold
                cmp     #$06
                bne     checkHoleDigging
                lda     #$00
                sta     playingSoundAllGold
                sta     soundIndexAllGold
.checkHoleDigging lda    oldPlayerXPosLo
                sta     tmpXPosLo
                lda     oldPlayerXPosHi
                sta     tmpXPosHi
                lda     oldPlayerYPos
                sta     tmpYPos
                lda     diggingHole
                beq     checkPlayerFalling              ;not digging a hole at the moment
; update animation of hole digging
                lda     #$13
                jsr     OSBYTE                          ;*FX19
                ldx     indexAnimDigHole
                lda     spriteNumbersAnimDigHole,x
                ldx     xPosDigHoleLo
                stx     $70
                ldx     xPosDigHoleHi
                stx     $71
                ldy     yPosDigHole
                jsr     plotSprite10x10                 ;erase old sprite for hole digging
                lda     #$07
                ldx     #<sound4
                ldy     #>sound4
                jsr     OSWORD                          ;SOUND: digging hole
                dec     indexAnimDigHole
                beq     doneDigging
                ldx     indexAnimDigHole
                lda     spriteNumbersAnimDigHole,x
                ldx     xPosDigHoleLo
                stx     $70
                ldx     xPosDigHoleHi
                stx     $71
                ldy     yPosDigHole
                jsr     plotSprite10x10                 ;draw new sprite for hole digging
                jmp     redrawPlayer

.doneDigging     lda     #$00
                sta     diggingHole
                lda     playerDirection
                beq     playerFacingLeft                ;player facing left
                lda     #$07                            ;first sprite frame of player facing right
                bne     setPlayerSpriteFrame            ;jump always

.playerFacingLeft lda    #$0a                            ;first sprite frame of player facing left
.setPlayerSpriteFrame sta playerFrameNumber
                jsr     addNewHole
                jmp     redrawPlayer

.checkPlayerFalling lda  playerFalling
                beq     checkWhichKeysPressed           ;not falling
                inc     soundCounterWhileFalling
                lda     soundCounterWhileFalling
                and     #$01
                cmp     #$01
                bne     skipSoundFalling                ;update falling sound every other 'tick'
                lda     soundPitchWhileFalling
                sta     pitch5
                lda     #$07
                ldx     #<sound5
                ldy     #>sound5
                jsr     OSWORD                          ;SOUND: falling
                dec     soundPitchWhileFalling
.skipSoundFalling lda    tmpYPos
                clc
                adc     #$02
                sta     tmpYPos                         ;ypos+=2
                lda     playerYBlkInternalDecimalOffset
                clc
                sed
                adc     #$20
                sta     playerYBlkInternalDecimalOffset ;internal offset+=20
                cld
                bcc     preRedrawPlayer2
                inc     playerYBlockPos                 ;adjust block ypos if needed
                lda     $76                             ;add 28 to tilemap ptr, i.e. next tilemap row
                clc
                adc     #$1c
                sta     $76
                bcc     noinc_L0B0A
                inc     $77
.noinc_L0B0A     lda     playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect the tile where the player is at this very moment
                cmp     #$04                            ;line
                bne     keepFalling
                jmp     playerStopFalling               ;encountered a line, so stop falling

.keepFalling     lda     playerXBlockPos
                clc
                adc     #$39
                tay
                lda     ($76),y                         ;inspect tile directly below the player
                cmp     #$01                            ;brick
                beq     playerStopFalling
                cmp     #$02                            ;solid block
                beq     playerStopFalling
                cmp     #$03                            ;ladder
                beq     playerStopFalling
                cmp     #$06                            ;thick red bar
                bne     preRedrawPlayer2
.playerStopFalling lda   #$00
                sta     playerFalling                   ;found solid ground, so stop falling
.preRedrawPlayer2 jmp    redrawPlayer

.checkWhichKeysPressed lda keysPressed
                bne     checkKeyRight
                jmp     redrawPlayer                    ;no keys pressed

.checkKeyRight   and     #$08
                bne     movePlayerRight                 ;going right?
                jmp     checkKeyLeft

.movePlayerRight lda     playerXBlockPos
                clc
                adc     #$1e
                tay
                lda     ($76),y                         ;inspect tile directly to the right of the player
                cmp     #$01                            ;is it brick?
                beq     cannotGoRight
                cmp     #$02                            ;is it solid block?
                beq     cannotGoRight
                cmp     #$31                            ;is it trapdoor?
                beq     cannotGoRight
                lda     playerYBlkInternalDecimalOffset
                beq     checkRightEdgeOfScreen          ;vertically aligned to block, so no need to check extra tiles to the right
                tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect floor tile directly to the botttom right of the player
                cmp     #$01                            ;is it brick?
                beq     cannotGoRight
                cmp     #$02                            ;is it solid block?
                beq     cannotGoRight
                cmp     #$31                            ;is it trapdoor?
                bne     checkRightEdgeOfScreen
.cannotGoRight   lda     playerXBlkInternalDecimalOffset
                cmp     #$20
                bne     checkRightEdgeOfScreen
                jmp     redrawPlayer                    ;blocked, cannot go right

.checkRightEdgeOfScreen lda playerXBlockPos
                cmp     #$1b                            ;max xpos = 27 (in 10px blocks)
                bne     checkGoingRightOnLine
                lda     playerXBlkInternalDecimalOffset
                cmp     #$20
                bne     checkGoingRightOnLine
                jmp     redrawPlayer                    ;at right edge of screen, cannot go right

.checkGoingRightOnLine lda playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect tile at the exact position of the player
                cmp     #$04                            ;line
                bne     grSelectFrameWalking
                lda     playerYBlkInternalDecimalOffset
                bne     grSelectFrameWalking
                ldy     oldPlayerFrameNumber
                cpy     #$10
                bcc     grResetFrameWhileHanging
                cpy     #$12
                bcs     grResetFrameWhileHanging
                jmp     grSetFrameHanging

.grResetFrameWhileHanging ldy #$12                       ;indicates frame 1 of player hanging on a line
.grSetFrameHanging lda   playerSpriteFrames,y            ;select correct player sprite frame when hanging from a line
                sta     playerFrameNumber
                jmp     grUpdatePos

.grSelectFrameWalking ldy oldPlayerFrameNumber
                cpy     #$09
                bcc     grSetFrameWalking
                ldy     #$09
.grSetFrameWalking lda   playerSpriteFrames,y
                sta     playerFrameNumber
.grUpdatePos     lda     tmpXPosLo
                clc
                adc     #$02
                sta     tmpXPosLo
                lda     tmpXPosHi
                adc     #$00
                sta     tmpXPosHi                       ;xpos+=2 (16bit)
                lda     playerXBlkInternalDecimalOffset
                clc
                sed
                adc     #$20
                sta     playerXBlkInternalDecimalOffset ;internal block offset+=20
                cld
                lda     playerXBlockPos
                adc     #$00
                sta     playerXBlockPos                 ;xblockpos++ if crossed block boundary
                lda     #$01
                sta     playerDirection                 ;i.e. player is facing right
                lda     playerXBlkInternalDecimalOffset
                beq     grInspectNewPos
                jmp     redrawPlayer                    ;done when player is not horizontally aligned to 10px block

.grInspectNewPos lda     playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect tile exactly at the position of the player
                cmp     #$04                            ;line
                bne     grInspectTileBelowNewPos
                lda     playerYBlkInternalDecimalOffset
                bne     grInspectTileBelowNewPos
                jmp     redrawPlayer                    ;done when player is not vertically aligned to 10px block

.grInspectTileBelowNewPos tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect tile directly below the player
                beq     grNoSolidFloor
                cmp     #$ff                            ;hole
                beq     grNoSolidFloor
                cmp     #$04                            ;line
                beq     grNoSolidFloor
                cmp     #$05                            ;gold ingot
                beq     grNoSolidFloor
                cmp     #$31                            ;trapdoor
                beq     grNoSolidFloor
                cmp     #$32                            ;escape ladder
                beq     grNoSolidFloor
                jmp     redrawPlayer                    ;done when there is a solid floor below the player

.grNoSolidFloor  jmp     checkIfPlayerShouldBeFalling

.checkKeyLeft    lda     keysPressed
                and     #$04
                bne     movePlayerLeft
                jmp     checkKeyDown

.movePlayerLeft  lda     playerXBlockPos
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect tile directly to the left of the player
                cmp     #$01                            ;brick
                beq     cannotGoLeft
                cmp     #$02                            ;solid block
                beq     cannotGoLeft
                cmp     #$31                            ;trapdoor
                beq     cannotGoLeft
                lda     playerYBlkInternalDecimalOffset
                beq     checkLeftEdgeOfScreen           ;vertically aligned to block, so no need to check extra tiles to the left
                tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect floor tile directly to the left of the player
                cmp     #$01                            ;brick
                beq     cannotGoLeft
                cmp     #$02                            ;solid block
                beq     cannotGoLeft
                cmp     #$31                            ;trapdoor
                bne     checkLeftEdgeOfScreen
.cannotGoLeft    lda     playerXBlkInternalDecimalOffset
                bne     checkLeftEdgeOfScreen
                jmp     redrawPlayer                    ;blocked, cannot go left

.checkLeftEdgeOfScreen lda playerXBlockPos
                bne     checkGoingLeftOnLine            ;min xpos = 0 (in 10px blocks)
                lda     playerXBlkInternalDecimalOffset
                bne     checkGoingLeftOnLine
                jmp     redrawPlayer                    ;at left edge of screen, cannot go left

.checkGoingLeftOnLine lda playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect tile at the exact location of the player
                cmp     #$04                            ;line
                bne     glSelectFrameWalking
                lda     playerYBlkInternalDecimalOffset
                bne     glSelectFrameWalking
                ldy     oldPlayerFrameNumber
                cpy     #$13
                bcc     glResetFrameWhileHanging
                cpy     #$15
                bcs     glResetFrameWhileHanging
                jmp     glSetFrameHanging

.glResetFrameWhileHanging ldy #$15
.glSetFrameHanging lda   playerSpriteFrames,y            ;select correct player sprite frame when hanging from a line
                sta     playerFrameNumber
                jmp     glUpdatePos

.glSelectFrameWalking ldy oldPlayerFrameNumber
                cpy     #$0a
                bcc     glResetFrameWalking
                cpy     #$0c
                bcs     glResetFrameWalking
                jmp     glSetFrameWalking

.glResetFrameWalking ldy #$0c
.glSetFrameWalking lda   playerSpriteFrames,y
                sta     playerFrameNumber
.glUpdatePos     lda     tmpXPosLo
                sec
                sbc     #$02
                sta     tmpXPosLo
                lda     tmpXPosHi
                sbc     #$00
                sta     tmpXPosHi                       ;xpos-=2 (16bit)
                lda     playerXBlkInternalDecimalOffset
                sec
                sed
                sbc     #$20
                sta     playerXBlkInternalDecimalOffset ;internal block offset-=20
                cld
                lda     playerXBlockPos
                sbc     #$00
                sta     playerXBlockPos                 ;xblockpos-- if crossed block boundary
                lda     #$00
                sta     playerDirection                 ;i.e. player is facing left
                lda     playerXBlkInternalDecimalOffset
                beq     glInspectNewPos
                jmp     redrawPlayer                    ;done when player is not horizontally aligned to 10px block

.glInspectNewPos lda     playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect tile at the exact location of the player
                cmp     #$04                            ;line
                bne     glInspectTileBelowNewPos
                lda     playerYBlkInternalDecimalOffset
                bne     glInspectTileBelowNewPos
                jmp     redrawPlayer                    ;done when player is not vertically aligned to 10px block

.glInspectTileBelowNewPos tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect tile directly below the player
                beq     glNoSolidFloor
                cmp     #$ff                            ;hole
                beq     glNoSolidFloor
                cmp     #$04                            ;line
                beq     glNoSolidFloor
                cmp     #$05                            ;gold ingot
                beq     glNoSolidFloor
                cmp     #$31                            ;trapdoor
                beq     glNoSolidFloor
                cmp     #$32                            ;escape ladder
                beq     glNoSolidFloor
                jmp     redrawPlayer                    ;done when there is a solid floor below the player

.glNoSolidFloor  jmp     checkIfPlayerShouldBeFalling

.checkKeyDown    lda     keysPressed
                and     #$02
                bne     movePlayerDown
                jmp     checkKeyUp

.movePlayerDown  lda     playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect tile at the exact location of the player
                cmp     #$03                            ;ladder
                bne     gdInspectTileBelowPlayer
; are we moving down on a ladder but standing on a solid floor?
                tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect tile directly below the player
                cmp     #$01                            ;brick
                beq     gdPreRedrawPlayer
                cmp     #$02                            ;solid block
                beq     gdPreRedrawPlayer
                cmp     #$06                            ;red bar
                beq     gdPreRedrawPlayer
                jmp     gdUpdatePos                     ;not standing on a solid floor so update the player position on the ladder

.gdPreRedrawPlayer jmp   redrawPlayer                    ;cannot move further down so just redraw player

.gdInspectTileBelowPlayer tya                            ;want to move down but not on a ladder
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect the tile directly below the tile directly below the player (!)
                beq     gdPreCheckIfFalling
                cmp     #$04                            ;line
                beq     gdPreCheckIfFalling
                cmp     #$05                            ;gold ingot
                beq     gdPreCheckIfFalling
                cmp     #$31                            ;trapdoor
                beq     gdPreCheckIfFalling
                cmp     #$32                            ;escape ladder
                beq     gdPreCheckIfFalling
                cmp     #$03                            ;ladder
                beq     gdUpdatePos                     ;when moving to another ladder block then just update player pos
                jmp     redrawPlayer                    ;in all other cases cannot move down so just redraw player

.gdPreCheckIfFalling jmp checkIfPlayerShouldBeFalling

.gdUpdatePos     lda     playerXBlockPos                 ;align player to 10px block horizontally
                jsr     times10_16bit
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                lda     #$00
                sta     playerXBlkInternalDecimalOffset
                lda     tmpYPos
                clc
                adc     #$02
                sta     tmpYPos                         ;ypos+=2 (down)
                lda     playerYBlkInternalDecimalOffset
                clc
                sed
                adc     #$20
                sta     playerYBlkInternalDecimalOffset ;internal block offset+=20
                cld
                bcc     noinc_L0DB7
                inc     playerYBlockPos                 ;yblockpos++ if crossed block boundary
                lda     $76                             ;add 28 (number of tiles in 1 row) to tilemap ptr $77/$76
                clc
                adc     #$1c
                sta     $76
                bcc     noinc_L0DB7
                inc     $77                             ;move tilemap pointer to next row
.noinc_L0DB7     jmp     selectNextUpDownPlayerFrame

.checkKeyUp      lda     keysPressed
                and     #$01
                bne     movePlayerUp
                jmp     checkKeyDig

.movePlayerUp    ldy     playerXBlockPos
                iny
                lda     ($76),y                         ;inspect tile directly above the player
                cmp     #$01                            ;brick
                beq     guPossiblyBlocked
                cmp     #$02                            ;solid block
                beq     guPossiblyBlocked
                cmp     #$31                            ;trapdoor
                bne     guNotBlocked
.guPossiblyBlocked lda   playerYBlkInternalDecimalOffset
                bne     guNotBlocked                    ;not vertically aligned to block so still some pixel room above player
                jmp     redrawPlayer                    ;solid object directly above player so blocked, cannot move up

.guNotBlocked    tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect the tile at the exact location of the player
                cmp     #$03                            ;ladder
                beq     guOnLadder
                lda     playerYBlkInternalDecimalOffset
                bne     guPossiblyLadderBelow           ;we could still be on a ladder tile (player can overlap 2 blocks)
                jmp     redrawPlayer                    ;definitely not on a ladder, cannot move up, just redraw player

.guPossiblyLadderBelow tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect the tile directly below the player
                cmp     #$03                            ;ladder
                beq     guOnLadder                      ;yes, we're on a ladder after all
                jmp     redrawPlayer                    ;definitely not on a ladder, cannot move up, just redraw player

.guOnLadder      lda     playerYBlockPos
                bne     guUpdatePos
                lda     playerYBlkInternalDecimalOffset
                bne     guUpdatePos
                jmp     redrawPlayer                    ;cannot move up if we have reached the very top edge of the screen, so just redraw player

.guUpdatePos     lda     playerXBlockPos                 ;align player to 10px block horizontally
                jsr     times10_16bit
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                lda     #$00
                sta     playerXBlkInternalDecimalOffset
                lda     tmpYPos
                sec
                sbc     #$02
                sta     tmpYPos                         ;ypos-=2 (up)
                lda     playerYBlkInternalDecimalOffset
                sec
                sed
                sbc     #$20
                sta     playerYBlkInternalDecimalOffset ;internal block offset-=20
                cld
                bcs     nodec_L0E45
                dec     playerYBlockPos                 ;yblockpos-- if crossed block boundary
                lda     $76
                sec
                sbc     #$1c
                sta     $76
                bcs     nodec_L0E45
                dec     $77                             ;move tilemap pointer to previous row
.nodec_L0E45     jmp     selectNextUpDownPlayerFrame

.checkKeyDig     lda     keysPressed
                and     #$10
                bne     tryDigging
                jmp     preRedrawPlayer

.tryDigging      lda     playerDirection
                beq     digPlayerFacingLeft
                ldy     #$1e                            ;player is facing right, so first inspect tile directly to the right of player (not floor tile!)
                bne     digInspectTile                  ;jump always

.digPlayerFacingLeft ldy #$1c                            ;player is facing left, so first inspect tile directly to the leftof player (not floor tile!)
                lda     playerXBlkInternalDecimalOffset
                beq     digInspectTile
                iny
.digInspectTile  tya
                clc
                adc     playerXBlockPos
                tay
                lda     ($76),y                         ;first inspect tile directly to the left or right of player (not floor tile!)
                beq     digCheckBrick
                cmp     #$32                            ;escape ladder
                beq     digCheckBrick
                cmp     #$ff                            ;hole
; can only dig brick under empty tile, under (invisible) escape ladder or under
; another hole
                bne     preRedrawPlayer                 ;in all other cases, don't dig, just redraw player
.digCheckBrick   tya
                clc
                adc     #$1c
                tay
                lda     ($76),y                         ;inspect the floor tile directly to the left or right of player
                cmp     #$01                            ;brick
                bne     preRedrawPlayer                 ;can only dig in brick, otherwise just redraw player
                lda     #$ff
                sta     ($76),y                         ;mark as hole
                ldx     #$16                            ;assume standing player facing right
                lda     playerDirection
                bne     digSetPlayerFrame
                inx                                     ;standing player facing left
.digSetPlayerFrame stx   playerFrameNumber
                lda     playerDirection
                bne     startDigging
                lda     playerXBlkInternalDecimalOffset
                beq     startDigging
                inc     playerXBlockPos                 ;adjust xblockpos
.startDigging    lda     playerXBlockPos                 ;align to 10px block horizontally
                jsr     times10_16bit
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                lda     #$00
                sta     playerXBlkInternalDecimalOffset
                lda     #$05
                sta     indexAnimDigHole                ;first frame for digging a hole
                lda     #$01
                sta     diggingHole                     ;busy digging a hole now
                ldx     playerXBlockPos
                lda     playerDirection
                beq     saveHolePosFacingLeft
                inx
                jmp     saveHolePos                     ;facing right

.saveHolePosFacingLeft dex
.saveHolePos     txa
                sta     xBlockPosDigHole
                jsr     times10_16bit
                lda     $70
                sta     xPosDigHoleLo
                lda     $71
                sta     xPosDigHoleHi
                ldy     playerYBlockPos
                iny
                tya
                sta     yBlockPosDigHole
                jsr     times10
                sta     yPosDigHole
; here we have saved the block and pixel position of the freshly dug hole
.preRedrawPlayer jmp     redrawPlayer                    ;and finally redraw player

.xPosDigHoleLo   equb    $00
.xPosDigHoleHi   equb    $00
.yPosDigHole     equb    $00
.xBlockPosDigHole equb   $00
.yBlockPosDigHole equb   $00
.soundCounterWhileFalling equb $00

.selectNextUpDownPlayerFrame ldy oldPlayerFrameNumber
                cpy     #$0d
                beq     updownSetFrame
                cpy     #$0e
                beq     updownSetFrame
                ldy     #$0d
.updownSetFrame  lda     playerSpriteFrames,y
                sta     playerFrameNumber
                jmp     redrawPlayer

.checkIfPlayerShouldBeFalling ldy playerYBlockPos
                iny
                tya
                ldy     numberOfEnemies                 ;check for all enemies if they happen to be directly below the player
.sbfNextEnemy    pha
                cmp     enemyYBlockPos,y
                bne     sbfNoEnemyMatch
                lda     playerXBlockPos
                cmp     enemyXBlockPos,y
                bne     sbfNoEnemyMatch
                pla
                jmp     redrawPlayer                    ;yes, enemy below player. You can actually walk on enemies!

.sbfNoEnemyMatch pla
                dey
                bpl     sbfNextEnemy
; no solid floor (including enemies) below the player
; this means we should start falling
; unless we are on a ladder
                lda     playerXBlockPos                 ;align player to 10px block (horizontally)
                pha
                jsr     times10_16bit
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                lda     #$00
                sta     playerXBlkInternalDecimalOffset
                pla
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect the tile at the exact location of the player
                cmp     #$03                            ;ladder
                beq     redrawPlayer                    ;cannot fall when we are on a ladder, so we're done here
; prepare falling sequence (frames, sound)
                lda     #$01
                sta     playerFalling
                lda     #$a0
                sta     soundPitchWhileFalling
                lda     #$0f
                sta     playerFrameNumber
.redrawPlayer    lda     #$13
                jsr     OSBYTE                          ;*FX19
                jsr     drawOrErasePlayerSprite         ;erase player at old pos
                lda     tmpXPosLo
                sta     oldPlayerXPosLo
                lda     tmpXPosHi
                sta     oldPlayerXPosHi
                lda     tmpYPos
                sta     oldPlayerYPos
                lda     playerFrameNumber
                sta     oldPlayerFrameNumber
                jsr     drawOrErasePlayerSprite         ;draw player at new pos
                lda     playerXBlockPos
                clc
                adc     #$1d
                tay
                lda     ($76),y                         ;inspect the tile at the exact location of the player
                cmp     #$05                            ;gold ingot
                beq     collectGoldIngot
                cmp     #$01                            ;brick
                bne     rpDone
                sta     playerIsDead                    ;permanently trapped in a hole, i.e. dead
.rpDone          jmp     preCheckKeys

.collectGoldIngot lda    #$00
                sta     ($76),y                         ;mark empty tile in tilemap where gold ingot was
                lda     playerXBlockPos
                jsr     times10_16bit
                lda     playerYBlockPos
                jsr     times10
                lda     #$05                            ;gold ingot
                jsr     plotSprite10x10                 ;erase
                ldx     #$50
                ldy     #$02
                jsr     addYXtoScoreBCD                 ;score+=250
                lda     #$05
                sta     soundIndexGold                  ;start sound for collecting a gold ingot
                dec     numberOfGoldIngots
                bne     preCheckKeys
; collected all gold ingots: replace all escape ladder blocks in the tilemap
; with regular ladder blocks so we can exit the level
                lda     #$01
                sta     allGoldCollected
                sta     playingSoundAllGold
                lda     #$00
                sta     xBlockPos
                sta     yBlockPos
                lda     #<tileMap
                sta     $74
                lda     #>tileMap
                sta     $75
.replaceEscapeLadder ldy xBlockPos
                lda     ($74),y
                cmp     #$32                            ;escape ladder
                bne     nextTileInRow
                lda     #$03                            ;ladder
                sta     ($74),y                         ;replace escape ladder with regular ladder in tilemap
                lda     xBlockPos
                jsr     times10_16bit
                lda     yBlockPos
                jsr     times10
                lda     #$03                            ;ladder
                jsr     plotSprite10x10                 ;also draw ladder blocks on screen
.nextTileInRow   inc     xBlockPos
                lda     xBlockPos
                cmp     #$1c                            ;28 blocks in a row
                bne     replaceEscapeLadder
                inc     yBlockPos
                lda     yBlockPos
                cmp     #$11                            ;16+1 rows
                beq     preCheckKeys                    ;done?
                lda     $74                             ;next row in tilemap
                clc
                adc     #$1c
                sta     $74
                lda     $75
                adc     #$00
                sta     $75
                lda     #$00
                sta     xBlockPos
                jmp     replaceEscapeLadder

.preCheckKeys    jmp     checkKeys

.drawOrErasePlayerSprite lda oldPlayerXPosLo
                sta     $70
                lda     oldPlayerXPosHi
                sta     $71
                ldy     oldPlayerYPos
                lda     oldPlayerFrameNumber
                jmp     plotSprite10x10

; input: A, output: 10*A in $71/$70
.times10_16bit   ldx     #$00
                stx     $71
                asl     a
                sta     $70
                asl     $70
                rol     $71
                asl     $70
                rol     $71
                clc
                adc     $70
                sta     $70
                bcc     noinc_L1041
                inc     $71
.noinc_L1041     rts

; input: A, output 10*A in A and also in Y
.times10         asl     a
                sta     $80
                asl     a
                asl     a
                clc
                adc     $80
                tay
                rts

.addYXtoScoreBCD txa
                sed
                clc
                adc     score
                sta     score
                tya
                adc     score+1
                sta     score+1
                lda     #$00
                adc     score+2
                sta     score+2
                lda     #$00
                adc     score+3
                sta     score+3
                cld
                jmp     printScore                      ;also refresh score on screen

.tmpYPos         equb    $00                             ;used for pixel but also block pos
.tmpXPosLo       equb    $00                             ;used for pixel but also block pos
.tmpXPosHi       equb    $00
.playerSpriteFrames equb $00
                equb    $01
                equb    $02
                equb    $03
                equb    $04
                equb    $05
                equb    $06
                equb    $08
                equb    $09
                equb    $07
                equb    $0b
                equb    $0c
                equb    $0a
                equb    $0e
                equb    $0d
                equb    $0f
                equb    $11
                equb    $12
                equb    $10
                equb    $14
                equb    $15
                equb    $13
.playerFrameNumber equb  $00
.playerFalling   equb    $00
.diggingHole     equb    $00
.indexAnimDigHole equb   $00
.playerDirection equb    $00                             ;0=left, 1=right
.allGoldCollected equb   $00
.soundIndexGold  equb    $00
.playerIsDead    equb    $00
.spriteNumbersAnimDigHole equb $1c                       ;empty (hole)
                equb    $1b                             ;acid lowest
                equb    $1a                             ;acid low
                equb    $19                             ;acid medium
                equb    $18                             ;acid high up in hole
                equb    $01                             ;brick
.revEncStrGameOver equb  $1c                             ;space
                equb    $1c                             ;space
                equb    $0c                             ;R
                equb    $03                             ;E
                equb    $10                             ;V
                equb    $0a                             ;O
                equb    $1c                             ;space
                equb    $1c                             ;space
                equb    $03                             ;E
                equb    $08                             ;M
                equb    $00                             ;A
                equb    $04                             ;G
                equb    $1c                             ;space
                equb    $1c                             ;space

.addNewHole      ldx     #$00
.findUnusedHole  lda     holeFillCounters,x
                cmp     #$ff                            ;$ff means slot unused
                beq     setHoleInfo                     ;found unused hole slot
                inx
                cpx     #$0b                            ;max 11 holes
                bne     findUnusedHole
.setHoleInfo     lda     xBlockPosDigHole
                sta     holeXBlockPos,x
                lda     yBlockPosDigHole
                sta     holeYBlockPos,x
                lda     #$82                            ;initial counter value for a new hole (determines fill rate)
                sta     holeFillCounters,x
                rts

.updateHoles     ldx     #$0a                            ;start at last hole
                stx     holeIndex
.checkHole       ldx     holeIndex
                lda     holeFillCounters,x
                cmp     #$ff
                beq     nextHole                        ;skip to next hole if current hole is not in use
                dec     holeFillCounters,x
                lda     holeFillCounters,x
                cmp     #$14                            ;reached marker for first update to hole?
                bne     holeCheckSecondMarker
                lda     #$1f                            ;empty hole sprite (to erase)
                sta     holeAnimFrame
                lda     #$1d                            ;first anim frame of hole filling up (to draw)
                jmp     drawHole

.holeCheckSecondMarker cmp #$0a                          ;reached marker for second update to hole?
                bne     holeCheckThirdMarker
                lda     #$1d                            ;first anim frame of hole filling up (to erase)
                sta     holeAnimFrame
                lda     #$1e                            ;second anim frame of hole filling up (to draw)
                jmp     drawHole

.holeCheckThirdMarker cmp #$ff                           ;reached marker for completing hole?
                bne     preNextHole
                lda     holeYBlockPos,x
                tay                                     ;&&&& not needed? first thing calcTileMapRowPtr() does is TAY!
                jsr     calcTileMapRowPtr
                lda     holeXBlockPos,x                 ;&&&& could do LDY?
                tay
                lda     #$01
                sta     ($80),y                         ;store brick ID in tilemap again (meaning hole is gone)
                lda     #$1e                            ;second anim frame of hole filling up (to erase)
                sta     holeAnimFrame
                lda     #$01                            ;brick (to draw)
                jmp     drawHole

.preNextHole     jmp     nextHole

.drawHole        pha
                ldx     holeIndex
                lda     holeXBlockPos,x
                jsr     times10_16bit
                ldx     holeIndex
                lda     holeYBlockPos,x
                jsr     times10
                lda     holeAnimFrame
                jsr     plotSprite10x10                 ;erase old hole sprite
                ldx     holeIndex
                lda     holeXBlockPos,x
                jsr     times10_16bit
                ldx     holeIndex
                lda     holeYBlockPos,x
                jsr     times10
                pla
                jsr     plotSprite10x10                 ;draw new hole sprite
.nextHole        dec     holeIndex
                bmi     holesDone
                jmp     checkHole                       ;loop all over holes

.holesDone       rts

; input: A=tilemap row number, output: $81/$80=tilemap row ptr = tileMap+28*row
.calcTileMapRowPtr tay
                lda     #<tileMap
                sta     $80
                lda     #>tileMap
                sta     $81
                cpy     #$00
                beq     tmrDone
.loopAdd28       lda     $80
                clc
                adc     #$1c
                sta     $80
                lda     $81
                adc     #$00
                sta     $81
                dey
                bne     loopAdd28
.tmrDone         rts

.holeXBlockPos   equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.holeYBlockPos   equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.holeFillCounters equb   $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
                equb    $ff
.holeIndex       equb    $00
.holeAnimFrame   equb    $00

.readJoystickAndKeys lda #$00                            ;apparently the Master Compact has a joystick on the User Port?
                sta     keysPressed
                sta     DDRB                            ;set USER VIA Port B as Input
                lda     IRB
                eor     #$ff
                beq     checkMovementKeys               ;no active inputs, so check keys instead
                sta     keysPressed
                rts

.checkMovementKeys ldx   #$04                            ;scan the 5 movement keys
.scanNextKey     stx     tmp03
                lda     keyCodesMovement,x
                tax
                lda     #$79
                jsr     OSBYTE                          ;scan key
                cpx     #$00
                bpl     mkKeyNotPressed
                ldx     tmp03
                lda     movementBitMask,x
                ora     keysPressed
                sta     keysPressed                     ;add bit for specific key pressed
.mkKeyNotPressed ldx     tmp03
                dex
                bpl     scanNextKey
                rts

.drawLevel       jsr     clearScreen
                lda     #$a0                            ;draw red line (4px thick) at bottom of screen; 70 bytecols wide
                sta     $80
                lda     #$7b                            ;&&&& this address may change if you move things around
                sta     $81
                ldx     #$45                            ;70 bytes long = 280px
.dlPlotRedBar    ldy     #$03                            ;4px thick
                lda     #$0f                            ;4 red pixels (logical colour 1)
.dlPlotByte      sta     ($80),y
                dey
                bpl     dlPlotByte
                lda     $80
                clc
                adc     #$08
                sta     $80
                lda     $81
                adc     #$00
                sta     $81                             ;move to next byte column on screen
                dex
                bpl     dlPlotRedBar
                lda     #$01                            ;print "SCORE"
                sta     textColour
                lda     #$a6
                sta     yBlockPos
                lda     #$00
                sta     xBlockPos
                ldx     #$00
.dlPrintScoreStr txa
                pha
                lda     encStrScore,x
                jsr     printAlphaNum
                pla
                tax
                inx
                cpx     #$05
                bne     dlPrintScoreStr
                lda     #$0d                            ;print "MEN"
                sta     xBlockPos
                lda     #$08
                jsr     printAlphaNum                   ;M
                lda     #$03
                jsr     printAlphaNum                   ;E
                lda     #$09
                jsr     printAlphaNum                   ;N
; print "LEVEL"
                lda     #$14
                sta     xBlockPos
                ldx     #$00
.dlPrintLevelStr txa
                pha
                lda     encStrLevel,x
                jsr     printAlphaNum
                pla
                tax
                inx
                cpx     #$05
                bne     dlPrintLevelStr
; now print the actual numbers
                jsr     printScore
                jsr     printLives
                jsr     printLevel
                jsr     buildTileMap
                lda     #<tileMap
                sta     $74
                lda     #>tileMap
                sta     $75
                lda     #$ff
                sta     numberOfEnemies                 ;$ff means 0 enemies
                lda     #$00
                sta     numberOfGoldIngots
                sta     tmp03                           ;counts tiles in a row 0..27
                sta     tmp02                           ;counts tilemap rows 0..15
.dlGetTile       ldy     tmp03
                lda     ($74),y
                bne     dlNonEmptyTile
                jmp     dlNextTile                      ;no need to process an empty tile so go to next tile

.dlNonEmptyTile  pha
                cmp     #$07                            ;player
                beq     dlFoundPlayerOrEnemyTile
                cmp     #$23                            ;enemy
                bne     dlCalcTilePixelPos
.dlFoundPlayerOrEnemyTile lda levelEditInProgress        ;are we going to play or edit a level?
                bne     dlCalcTilePixelPos              ;we are editing the level, so leave the player tile be
                lda     #$00
                sta     ($74),y                         ;we are playing the level, mark player tile as empty (0)
.dlCalcTilePixelPos lda  tmp03
                jsr     times10_16bit                   ;result in $71/$70 = pixel xpos of tile
                lda     tmp02
                jsr     times10                         ;result in A and also in Y = pixel ypos of tile
                pla
                pha
                cmp     #$23                            ;enemy
                bne     dlStorePlayerPos
; store enemy position
                inc     numberOfEnemies
                ldx     numberOfEnemies                 ;$ff means 0 enemies, 0 means 1 enemy, and so on
                cpx     #$05                            ;&&&& this is why there is room for max 6 enemies but max 5 are used
                bne     dlStoreEnemyPos
                dec     numberOfEnemies                 ;don't allow more than max enemies
                lda     #$00
                sta     ($74),y                         ;erase this enemy tile, because there are too many
                pla
                jmp     dlNextTile

.dlStoreEnemyPos sta     enemyFrames,x                   ;enemy always start facing left
                txa
                sta     enemyCounter,x
                lda     $70
                sta     enemyXPosLo,x
                lda     $71
                sta     enemyXPosHi,x
                tya
                sta     enemyYPos,x
                lda     tmp03
                sta     enemyXBlockPos,x
                lda     tmp02
                sta     enemyYBlockPos,x
                lda     #$00
                sta     enemyXBlkInternalDecimalOffset,x
                sta     enemyYBlkInternalDecimalOffset,x
.dlStorePlayerPos pla
                pha
                cmp     #$07                            ;player
                bne     dlCheckGoldIngot
                sta     oldPlayerFrameNumber
                sta     playerFrameNumber
                lda     $70
                sta     oldPlayerXPosLo
                lda     $71
                sta     oldPlayerXPosHi
                tya
                sta     oldPlayerYPos
                lda     tmp03
                sta     playerXBlockPos
                lda     tmp02
                sta     playerYBlockPos
                sec
                sbc     #$01
                jsr     calcTileMapRowPtr
                lda     $80
                sec
                sbc     #$01
                sta     $76
                lda     $81
                sbc     #$00
                sta     $77
; ($76) always points to the last tile of the tilemap row 2 rows above the
; player (according to playerYBlockPos)
; ($76),y points to the exact tile where the player (playerXBlockPos,
; playerYBlockPos) when y=playerXBlockPos+$1d
                lda     #$00
                sta     playerXBlkInternalDecimalOffset
                sta     playerYBlkInternalDecimalOffset
                lda     #$01
                sta     playerDirection                 ;player always starts facing right
                ldy     oldPlayerYPos
.dlCheckGoldIngot pla
                pha
                cmp     #$05                            ;gold ingot
                bne     dlCheckEscapeLadder
                inc     numberOfGoldIngots
.dlCheckEscapeLadder pla
                pha
                cmp     #$32                            ;escape ladder
                bne     dlCheckTrapDoor
                lda     levelEditInProgress
                bne     dlCheckTrapDoor
                pla
                jmp     dlNextTile                      ;escape ladder is invisble when playing a level so no need to draw it

.dlCheckTrapDoor pla
                cmp     #$31                            ;trapdoor
                bne     dlDrawTile
                ldx     levelEditInProgress
                bne     dlDrawTile                      ;when editing, show trapdoor
                lda     #$01                            ;when playing, show regular brick (but tilemap still indicates trapdoor)
.dlDrawTile      jsr     plotSprite10x10                 ;draw tile (Y is still pixel ypos of tile)
.dlNextTile      inc     tmp03
                lda     tmp03
                cmp     #$1c                            ;28 tiles in 1 row
                beq     dlNextTileRow
                jmp     dlGetTile

.dlNextTileRow   lda     #$00
                sta     tmp03
                lda     $74
                clc
                adc     #$1c
                sta     $74
                lda     $75
                adc     #$00
                sta     $75                             ;now points to next tilemap row
                inc     tmp02
                lda     tmp02
                cmp     #$10                            ;16 rows to go
                beq     dlDone
                jmp     dlGetTile

.dlDone          rts

; print score (7 digits, BCD in 4 bytes)
.printScore      lda     #$a6
                sta     yBlockPos
                lda     #$05
                sta     xBlockPos
                lda     #$02
                sta     textColour
                lda     score+3
                and     #$0f                            ;first digit (most significant) of score in lower nibble (BCD)
                clc
                adc     #$12                            ;convert to 0..9
                jsr     printAlphaNum
                ldx     #$02                            ;convert and print remaining 6 nibbles (3 bytes) of score
.nextScoreByte   lda     score,x
                stx     tmp03
                pha
                lsr     a
                lsr     a
                lsr     a
                lsr     a
                clc
                adc     #$12
                jsr     printAlphaNum                   ;convert and print hi nibble first
                pla
                and     #$0f
                clc
                adc     #$12
                jsr     printAlphaNum                   ;convert and print lo nibble
                ldx     tmp03
                dex
                bpl     nextScoreByte
                rts

.printLives      lda     #$a6
                sta     yBlockPos
                lda     #$10
                sta     xBlockPos
                lda     #$02
                sta     textColour
                lda     lives
                jmp     printThreeDigitNumber

.printLevel      lda     #$a6
                sta     yBlockPos
                lda     #$19
                sta     xBlockPos
                lda     #$02
                sta     textColour
                lda     level
                jsr     printThreeDigitNumber
                lda     #$0f                            ;4 red pixels
                sta     $7dd6                           ;&&&& why on earth store that here???
                rts

.printThreeDigitNumber ldy #$00
.nextDigit       ldx     #$00
.countUnits      inx
                sec
                sbc     unitValues,y
                bcs     countUnits
                clc                                     ;&&&&CLC not needed here
                adc     unitValues,y
                pha
                txa                                     ;number of units + 1
                clc
                adc     #$11                            ;convert to digit 0..9
                sty     tmp02
                jsr     printAlphaNum                   ;print digit
                pla
                ldy     tmp02
                iny
                cpy     #$02                            ;have we done all 3 digits?
                bne     nextDigit
                clc
                adc     #$12
                jsr     printAlphaNum                   ;print last digit // &&&& could be jmp printAlphaNum (and remove RTS)
                rts

; clear screen memory from &4fe0 to &7fff
; &&&& these addresses may change if you move things around
.clearScreen     lda     #$00
                sta     $80
                lda     #$4f
                sta     $81
                ldy     #$e0                            ;starting from &4fe0
.clearScreenByte lda     #$00
                sta     ($80),y
                iny
                beq     incScreenAddrHi
                cpy     #$ff
                bne     clearScreenByte
                lda     $81
                cmp     #$7f                            ;done if we reach &7fff (&&&& but doesn't clear this very last byte?)
                beq     doneClearScreen
                jmp     clearScreenByte

.incScreenAddrHi inc     $81
                jmp     clearScreenByte

.doneClearScreen rts

; A=symbol index, location is (xBlockPos, yBlockPos), colour is textColour
.printAlphaNum   sta     sm_loadAddr+1
                lda     #$00
                sta     sm_loadAddr+2
                asl     sm_loadAddr+1
                rol     sm_loadAddr+2
                asl     sm_loadAddr+1
                rol     sm_loadAddr+2
                asl     sm_loadAddr+1
                rol     sm_loadAddr+2                   ;*8
                lda     sm_loadAddr+1
                clc
                adc     #<alphaNumSprites
                sta     sm_loadAddr+1
                lda     sm_loadAddr+2
                adc     #>alphaNumSprites
                sta     sm_loadAddr+2                   ;effectively: alphaNumSprites + 8 * SpriteIndex
                lda     #$91
                sta     sm_PlotOperation                ;patch in opcode for sta (),y -- i.e. simply store data on screen, no EOR
                ldy     #$00
.panConvertData  jsr     convertColourToMask             ;textColour --> textColourMask
.sm_loadAddr     lda     $8000                           ;selfmod, get byte from sprite data
                pha
                jsr     colouriseByte                   ;letters and digits are stored as 1bpp sprites, so colourise upper nibble according to textColourMask
                sta     spriteBufferLine1,y             ;store first resulting byte in tmp buffer location
                iny
                jsr     convertColourToMask
                pla
                asl     a
                asl     a
                asl     a
                asl     a
                jsr     colouriseByte
                sta     spriteBufferLine1,y             ;colourise lower nibble and store in tmp buffer as well
                iny
                lda     #$00
                sta     spriteBufferLine1,y
                iny
                sta     spriteBufferLine1,y             ;pad tmp buffer with 2 zeroes
                inc     sm_loadAddr+1
                bne     noinc_L147F
                inc     sm_loadAddr+2                   ;advance source pointer to next byte in sprite data
.noinc_L147F     iny
                cpy     #$20                            ;8 bytes of 1bpp letter/digit data are converted/padded into 32 bytes of sprite data ready for a MODE 1 screen
                bne     panConvertData
; clear very first and very last (10th) line of sprite data in tmp buffer
                ldx     #$03
                lda     #$00
.panClear        sta     spriteBufferLine0,x
                sta     spriteBufferLine9,x
                dex
                bpl     panClear
                lda     #$00
                sta     $71
                lda     xBlockPos
                asl     a
                sta     $70
                asl     $70
                rol     $71
                asl     $70
                rol     $71
                clc
                adc     $70
                sta     $70
                lda     $71
                adc     #$00
                sta     $71                             ;$71/$70 = 10 * xBlockPos, i.e. pixel xpos of symbol to plot
                lda     $70
                and     #$03
                sta     tmp04                           ;xpos mod 4
                inc     xBlockPos                       ;prepare for adjacent symbol
                lda     yBlockPos
                cmp     #$0f
                bcs     panYPosAlreadyInPixels          ;if ypos>=15 then assume it's already a pixel position
                asl     a
                sta     $80
                asl     a
                asl     a
                clc
                adc     $80                             ;10 * yBlockPos, i.e. pixel ypos of symbol to plot
.panYPosAlreadyInPixels tay
                jsr     calcScreenAddr
                jmp     psCheckIfPreshiftingNeeded

.colouriseByte   ldx     #$00                            ;convert 1bpp symbol data (4 bits) to 2bpp sprite data (8 bits)
                stx     colourisedByte
                ldx     #$03
.cbInspectNextBit asl    a
                pha
                bcc     cbZeroBit
                lda     textColourMask
                ora     colourisedByte
                sta     colourisedByte
.cbZeroBit       lsr     textColourMask
                pla
                dex
                bpl     cbInspectNextBit
                lda     colourisedByte
                rts

.convertColourToMask ldx textColour
                lda     colourMaskLeftPixel,x
                sta     textColourMask
                rts

; A is sprite number, $71/$70 is 16-bit xpos, Y is ypos
.plotSprite10x10 pha
                lda     $70
                and     #$03
                sta     tmp04                           ;x mod 4
                jsr     calcScreenAddr
                pla
                asl     a
                tax
                lda     spriteAddr16,x
                sta     $72                             ;sprite addr lo
                inx
                lda     spriteAddr16,x
                sta     $73                             ;sprite addr hi
                ldy     #$00
                ldx     #$00
.psCopyByte      lda     ($72),y                         ;get byte from sprite data
                sta     spriteBufferLine0,x             ;store in tmp buffer
                iny
                inx
                txa
                and     #$03
                cmp     #$03                            ;have we copied 3 bytes?
                bne     psCheckCopyingDone
                lda     #$00
                sta     spriteBufferLine0,x             ;pad sprite line with a zero byte (so 3 bytes of sprite data (4+4+2=10 pixels) and 1 byte of padding)
                inx
.psCheckCopyingDone cpx  #$28                            ;have we done 40 bytes, i.e. the whole sprite?
                bne     psCopyByte                      ;no, keep copying bytes to tmp buffer
.psCheckIfPreshiftingNeeded lda tmp04                    ;xpos mod 4
                beq     psAlignedToByteColumn           ;no need to preshift the sprite data, we're aligned at a byte column
.psPreshiftSprite lda    #<spriteBufferLine0
                sta     $72
                lda     #>spriteBufferLine0
                sta     $73
                ldx     #$09                            ;10 lines of sprite data to shift 1px to the right, and do that xpos mod 4 times
                ldy     #$00
; xpos mod 4 determines if we need to shift all sprite data 1, 2 or 3 pixels to
; the right. This is done by repeatedly taking the rightmost pixel in each byte
; and moving it into the leftmost pixel of the next byte
.psPreshiftLine1pxRight lda ($72),y
                and     #$11
                asl     a
                asl     a
                asl     a
                sta     tmp05
                iny
                lda     ($72),y
                and     #$11
                asl     a
                asl     a
                asl     a
                sta     tmp06
                iny
                lda     ($72),y
                and     #$11
                asl     a
                asl     a
                asl     a
                sta     tmp07
                dey
                dey
                lda     ($72),y
                lsr     a
                and     #$77
                sta     ($72),y
                iny
                lda     ($72),y
                lsr     a
                and     #$77
                ora     tmp05
                sta     ($72),y
                iny
                lda     ($72),y
                lsr     a
                and     #$77
                ora     tmp06
                sta     ($72),y
                iny
                lda     ($72),y
                lsr     a
                and     #$77
                ora     tmp07
                sta     ($72),y
                iny
                dex
                bpl     psPreshiftLine1pxRight
                dec     tmp04
                bne     psPreshiftSprite
.psAlignedToByteColumn lda #<spriteBufferLine0           ;tmp buffer is fully prepared and ready to be copied (or EORed) to screen
                sta     sm_SourceByte+1
                lda     #>spriteBufferLine0
                sta     sm_SourceByte+2
                ldx     #$0a                            ;10 lines (of 4 bytes each) to store on screen
.psNextLine      ldy     #$00
.sm_SourceByte   lda     spriteBufferLine0               ;selfmod, get byte from tmp buffer
.sm_PlotOperation eor    ($70),y                         ;selfmod: sta (),y (&&&& double store!) or eor (),y
                sta     ($70),y                         ;store on screen
                inc     sm_SourceByte+1
                bne     noinc_L15AD
                inc     sm_SourceByte+2                 ;advance source ptr by 1 byte
.noinc_L15AD     tya
                clc
                adc     #$08
                tay                                     ;advance dest ptr to next byte column (on screen)
                cmp     #$20                            ;4 byte columns done?
                bne     sm_SourceByte                   ;no, keep copying bytes to screen
; tmp01 was set to sprite ypos mod 8 by calcScreenAddr()!
                lda     tmp01                           ;offset within byte column (0..7), 7 means we are at the last byte of the byte column
                cmp     #$07
                bne     psSameScreenRow
                lda     $70
                clc
                adc     #$29
                sta     $70
                lda     $71
                adc     #$02
                sta     $71                             ;update dest ptr (on screen) to next character row
                lda     #$00
                sta     tmp01                           ;reset 'offset within byte column' counter
                jmp     psGoNextLine

.psSameScreenRow inc     $70                             ;advance dest ptr (on screen) to next byte in byte column
                bne     noinc_L15D8
                inc     $71                             ;&&&& don't think this is necessary???
.noinc_L15D8     inc     tmp01                           ;also advance 'offset within byte column' counter
.psGoNextLine    dex
                bne     psNextLine                      ;do all 10 lines
                lda     #$51
                sta     sm_PlotOperation                ;restore opcode to default: eor (),y
                rts

.calcScreenAddr  lda     $70
                and     #$fc
                sta     $70
                asl     $70
                rol     $71                             ;$71/$70=8*(x div 4)
                tya
                and     #$07
                sta     tmp01                           ;y mod 8
                tya
                lsr     a
                lsr     a
                lsr     a
                tay                                     ;y div 8
                lda     screenAddrLo,y
                ora     tmp01
                clc
                adc     $70
                sta     $70
                lda     screenAddrHi,y
                adc     $71
                sta     $71                             ;$71/$70=screenStart+&230*(y div 8)+8*(x div 4)+(y mod 8) // &230 because of reduced MODE 1
                rts

.initVariables   lda     #$ff
                ldx     #$0a
.ivInitHoles     sta     holeFillCounters,x              ;mark max 11 holes as inactive
                dex
                bpl     ivInitHoles
                lda     #$00
                ldx     #$05
.ivInitEnemies   sta     enemyFalling,x                  ;initialize enemy data (max 6 enemies)
                sta     enemyInHoleHeight,x
                sta     enemyInHoleCountdown,x
                sta     enemyHoldsGoldIngot,x
                dex
                bpl     ivInitEnemies
                sta     playerFalling
                sta     allGoldCollected
                sta     diggingHole
                rts

.updateEnemies   ldx     #$ff
                stx     enemyIndex
.nextEnemy       inc     enemyIndex
                lda     enemyIndex
                cmp     #$06                            ;process 6 enemies but note that only max 5 are ever drawn
                beq     waitVsyncAndReturn
                ldx     enemyIndex
                inc     enemyCounter,x
                lda     enemyCounter,x
                and     #$01
                beq     nextEnemy                       ;do not update this enemy if its counter is even
                cpx     numberOfEnemies
                beq     updateEnemy
                bcs     delayLoop                       ;do a delay if this enemy is inactive // to keep a similar speed independent of number of active enemies
                jmp     updateEnemy                     ;update active (valid) enemies only

.waitVsyncAndReturn lda  #$13
                jmp     OSBYTE                          ;*FX19

.delayLoop       ldx     #$0a                            ;delay loop
                ldy     #$00
.delayLoop2      dey
                bne     delayLoop2
                dex
                bne     delayLoop2
                jmp     nextEnemy

.updateEnemy     ldx     enemyIndex
                lda     enemyXPosLo,x
                sta     tmpXPosLo
                lda     enemyXPosHi,x
                sta     tmpXPosHi                       ;xpos 16-bit in pixels not blocks
                lda     enemyYPos,x
                sta     tmpYPos                         ;ypos in pixels not blocks
                lda     enemyFrames,x
                sta     enemyFrameNumber
                lda     enemyFalling,x
                beq     ueNotFalling
; enemy is falling, update vertical position
                lda     tmpYPos
                clc
                adc     #$02
                sta     tmpYPos                         ;2 pixels down
                lda     enemyYBlkInternalDecimalOffset,x
                clc
                sed
                adc     #$20
                cld
                sta     enemyYBlkInternalDecimalOffset,x ;internal block offset
                lda     enemyYBlockPos,x
                adc     #$00
                sta     enemyYBlockPos,x                ;update block pos if needed
                lda     enemyYBlkInternalDecimalOffset,x
                bne     preCheckSpecialCases
; enemy is vertically aligned to 10px block
                lda     enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                beq     ueStopFalling                   ;encountered a line so stop falling
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                cmp     #$01                            ;brick
                beq     ueStopFalling
                cmp     #$02                            ;solid block
                beq     ueStopFalling
                cmp     #$03                            ;ladder
                beq     ueStopFalling
                cmp     #$06                            ;red bar
                beq     ueStopFalling
                cmp     #$ff                            ;hole
                bne     preCheckSpecialCases
.ueStopFalling   lda     #$00
                sta     enemyFalling,x                  ;mark as no longer falling
.preCheckSpecialCases jmp ueCheckSpecialCases

.ueNotFalling    lda     enemyInHoleHeight,x
                beq     ueIsEnemyDoneInHole             ;already at bottom of hole (or not in a hole?)
; busy dropping into a hole, so update ypos of enemy
                lda     tmpYPos
                clc
                adc     #$02
                sta     tmpYPos
                lda     enemyYBlkInternalDecimalOffset,x
                clc
                sed
                adc     #$20
                cld
                sta     enemyYBlkInternalDecimalOffset,x
                lda     enemyYBlockPos,x
                adc     #$00
                sta     enemyYBlockPos,x
                dec     enemyInHoleHeight,x             ;a little deeper into the hole
                bne     preCheckEnemyTrapped            ;haven't reached bottom of hole yet
                lda     enemyHoldsGoldIngot,x
                beq     ueEnemyReachedBottomOfHole      ;no gold ingot to leave behind
; reached bottom of hole and possibly leave gold ingot behind just above it
                lda     enemyYBlockPos,x
                sec
                sbc     #$01
                jsr     calcTileMapRowPtr
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile directly above enemy
                bne     ueEnemyReachedBottomOfHole      ;already something there so cannot leave gold ingot behind
                lda     #$05
                sta     ($80),y                         ;place gold ingot in tilemap directly above enemy
                lda     #$00
                sta     enemyHoldsGoldIngot,x           ;no longer holding gold ingot
                lda     enemyXBlockPos,x
                jsr     times10_16bit
                ldx     enemyIndex
                lda     enemyYBlockPos,x
                sec
                sbc     #$01
                jsr     times10
                lda     #$05                            ;gold ingot
                jsr     plotSprite10x10                 ;tilemap was updated, now also draw the gold ingot
.ueEnemyReachedBottomOfHole ldx enemyIndex
                lda     #$1e
                sta     enemyInHoleCountdown,x          ;counts the time spent in a hole
                ldx     #$75
                ldy     #$00
                jsr     addYXtoScoreBCD                 ;score+=75 for making an enemy fall into a hole
.preCheckEnemyTrapped jmp ueCheckEnemyTrapped

.ueIsEnemyDoneInHole lda enemyInHoleCountdown,x
                bne     ueUpdateHoleCounter             ;not yet time to climb out of hole
                jmp     ueIsEnemyRespawning             ;at bottom of hole for a while, check if respawning is needed

.ueUpdateHoleCounter dec enemyInHoleCountdown,x
                lda     enemyInHoleCountdown,x
                bne     ueCheckAlmostOutOfHole          ;still stuck in hole, but almost time to get out?
                jmp     ueDoneClimbingOutOrRespawning   ;done in hole, time to climb out (or respawn if trapped)

.ueCheckAlmostOutOfHole cmp #$09                         ;almost time to climb out of hole, so jiggle the enemy left and right
                beq     ueNudgeLeft
                cmp     #$08
                beq     ueNudgeRight
                cmp     #$07
                beq     ueNudgeLeft
                cmp     #$06
                beq     ueNudgeRight
                bcc     ueClimbingOutOfHole             ;use last few frames to climb up out of the hole
                jmp     ueCheckEnemyTrapped             ;not close to getting out of hole, so spend more time in hole

.ueNudgeLeft     lda     tmpXPosLo
                sec
                sbc     #$01
                sta     tmpXPosLo
                lda     tmpXPosHi
                sbc     #$00
                sta     tmpXPosHi                       ;xpos--
                jmp     ueCheckEnemyTrapped

.ueNudgeRight    lda     tmpXPosLo
                clc
                adc     #$01
                sta     tmpXPosLo
                lda     tmpXPosHi
                adc     #$00
                sta     tmpXPosHi                       ;xpos++
                jmp     ueCheckEnemyTrapped

.ueClimbingOutOfHole lda enemyFrames,x                   ;alternate between two up/down sprite frames for enemy
                cmp     #$26
                beq     ueSelectOtherUpDownFrame
                lda     #$26
                bne     ueSetUpDownFrame                ;jump always

.ueSelectOtherUpDownFrame lda #$27
.ueSetUpDownFrame sta    enemyFrameNumber                ;enemy up/down sprite #1 or #2
                lda     tmpYPos                         ;ypos-=2 because enemy is climbing out of a hole
                sec
                sbc     #$02
                sta     tmpYPos
                lda     enemyYBlkInternalDecimalOffset,x
                sec
                sed
                sbc     #$20
                cld
                sta     enemyYBlkInternalDecimalOffset,x
                lda     enemyYBlockPos,x
                sbc     #$00
                sta     enemyYBlockPos,x
.ueCheckEnemyTrapped ldx enemyIndex
                lda     enemyXBlkInternalDecimalOffset,x
                bne     preCheckSpecialCases2
; enemy is horizontally aligned
                lda     enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$01                            ;brick? i.e. got permanently stuck in hole
                bne     preCheckSpecialCases2
; enemy trapped in hole, make it respawn at top of screen
                lda     #$00
                sta     enemyXBlkInternalDecimalOffset,x
                sta     enemyYBlkInternalDecimalOffset,x
                sta     enemyInHoleHeight,x
                sta     enemyInHoleCountdown,x
                sta     enemyYBlockPos,x
                lda     #<tileMap
                sta     $80
                lda     #>tileMap
                sta     $81
                ldy     playerXBlockPos
.ueFindHorizontalRespawnLocation lda ($80),y             ;find a suitable horizontal location to respawn enemy
                beq     uePrepareToRespawnEnemy         ;empty tile
                cmp     #$32                            ;escape ladder
                beq     uePrepareToRespawnEnemy
                iny
                cpy     #$1c                            ;inspect max 28 locations in this tilemap row
                bne     ueFindHorizontalRespawnLocation
; no suitable respawn location in this tilemap row, so move to the next row
                lda     $80
                clc
                adc     #$1c
                sta     $80
                lda     $81
                adc     #$00
                sta     $81
                inc     enemyYBlockPos,x
                ldy     #$00                            ;start from beginning of tilemap row
                jmp     ueFindHorizontalRespawnLocation ;keep looking for a respawn location

.uePrepareToRespawnEnemy tya
                sta     enemyXBlockPos,x
                lda     #$0a
                sta     enemyRespawnCountdown,x         ;wait a short while before actually respawning enemy
                lda     #$1f
                sta     enemyFrameNumber                ;empty frame
                ldx     #$75
                ldy     #$00
                jsr     addYXtoScoreBCD                 ;score+=75 for making the enemy respawn
.preCheckSpecialCases2 jmp ueCheckSpecialCases

.ueIsEnemyRespawning lda enemyRespawnCountdown,x
                beq     ueDoneClimbingOutOrRespawning   ;at end of respawn countdown
; enemy is in the process of respawning
                cmp     #$09
                bne     ueNextRespawnFrame
; setup respawn at countdown==9
                lda     enemyXBlockPos,x
                jsr     times10_16bit
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                ldx     enemyIndex
                lda     enemyYBlockPos,x
                jsr     times10
                sty     tmpYPos                         ;calc enemy pixel xpos and ypos at respawn point
                lda     #$2f
                sta     enemyFrameNumber                ;enemy respawn frame #1
                jmp     ueCountdownRespawn

.ueNextRespawnFrame cmp  #$06
                bne     ueFinalRespawnFrame
                lda     #$30
                sta     enemyFrameNumber                ;enemy respawn frame #2
                jmp     ueCountdownRespawn

.ueFinalRespawnFrame cmp #$03
                bne     ueCountdownRespawn
                lda     #$28
                sta     enemyFrameNumber                ;enemy up/down #3 (falling)
.ueCountdownRespawn dec  enemyRespawnCountdown,x
                jmp     ueCheckSpecialCases

.ueDoneClimbingOutOrRespawning lda #$00
                sta     distanceToPassageGoingLeft
                sta     distanceToPassageGoingRight
; enemy is no longer either climbing out of a hole or respawning after getting
; trapped in a hole. So now we check for collision with the player and update
; the enemy position (moves enemy towards the player if possible)
                lda     enemyYBlockPos,x
                cmp     playerYBlockPos
                beq     ueEnemyAtSameBlockRowAsPlayer
                bcc     ueEnemyHigherThanPlayer
                jmp     uePlayerHigherThanEnemy

.ueEnemyAtSameBlockRowAsPlayer lda enemyYBlkInternalDecimalOffset,x
                beq     uePreCheckEnemyXPos
                jmp     ueEnemyStraightUp

.uePreCheckEnemyXPos jmp ueCheckEnemyXPos                ;enemy vertically aligned to 10px block and at same height as player, now check xpos if collision or...

; enemy is higher up on screen than the player
; if we want the enemy to move down towards the player, there must be no
; obstruction
; first, check if another enemy is obstructing the current enemy by being
; directly below it
.ueEnemyHigherThanPlayer jsr calcTileMapRowPtr
                ldx     enemyIndex
                lda     enemyXBlockPos,x
                ldy     numberOfEnemies
.ueCheckIfEnemyBelow pha
                cmp     enemyXBlockPos,y
                bne     ueNextEnemy
                lda     enemyYBlockPos,x
                clc
                adc     #$01
                cmp     enemyYBlockPos,y
                bne     ueNextEnemy
                pla
                jmp     ueCheckSpecialCases             ;yes another enemy is directly below the current enemy

.ueNextEnemy     pla
                dey
                bpl     ueCheckIfEnemyBelow
; no enemy obstructing the way down towards the player, but maybe something else
; is? scan the tiles to the left of the enemy, in the current row and in the row
; directly beneath it. Kind of measuring the distance from enemy to a passage
; down towards the player for later checking which is better: going left versus
; going right
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
.ueScanRowsLeftOfEnemy lda ($80),y                       ;inspect tile at exact location of enemy
                cmp     #$01                            ;brick
                beq     ueMovingLeftAndDownImpossible
                cmp     #$02                            ;solid block
                beq     ueMovingLeftAndDownImpossible
                cmp     #$31                            ;trapdoor
                beq     ueMovingLeftAndDownImpossible
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueStartScanningRowsRightOfEnemy ;empty tile
                cmp     #$03                            ;ladder
                beq     ueStartScanningRowsRightOfEnemy
                cmp     #$31                            ;trapdoor
                beq     ueStartScanningRowsRightOfEnemy
                cmp     #$32                            ;escape ladder
                beq     ueStartScanningRowsRightOfEnemy
                inc     distanceToPassageGoingLeft      ;increase distance to nearest passage of moving left and down to reach the player
                tya
                sec
                sbc     #$1c
                tay
                dey
                bpl     ueScanRowsLeftOfEnemy           ;scan until left edge of screen
.ueMovingLeftAndDownImpossible lda #$ff
.falseLabel1     sta     distanceToPassageGoingLeft      ;$ff means there is no route going left // &&&& falseLabel1 generated because of self-modifying code referencing &1900
.ueStartScanningRowsRightOfEnemy ldy enemyXBlockPos,x
.ueScanRowsRightOfEnemy lda ($80),y                      ;inspect tile at exact location of enemy
                cmp     #$01                            ;brick
                beq     ueMovingRightAndDownImpossible
                cmp     #$02                            ;solid block
                beq     ueMovingRightAndDownImpossible
                cmp     #$31                            ;trapdoor
                beq     ueMovingRightAndDownImpossible
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueDetermineEnemyDirection       ;empty tile
                cmp     #$03                            ;ladder
                beq     ueDetermineEnemyDirection
                cmp     #$31                            ;trapdoor
                beq     ueDetermineEnemyDirection
                cmp     #$32                            ;escape ladder
                beq     ueDetermineEnemyDirection
                inc     distanceToPassageGoingRight     ;increase distance to nearest passage of moving right and down to reach the player
                tya
                sec
                sbc     #$1c
                tay
                iny
                cpy     #$1c
                bne     ueScanRowsRightOfEnemy          ;scan until right edge of screen
.ueMovingRightAndDownImpossible lda #$ff
                sta     distanceToPassageGoingRight     ;$ff means there is no route going right
.ueDetermineEnemyDirection lda distanceToPassageGoingLeft
                beq     ueEnemyStraightDown
                cmp     #$ff
                bne     ueAtLeastOneRouteToPlayer
                lda     distanceToPassageGoingRight
                cmp     #$ff
                bne     ueAtLeastOneRouteToPlayer
                jmp     ueCheckSpecialCases             ;no route from enemy to player in either direction!

.ueAtLeastOneRouteToPlayer lda distanceToPassageGoingLeft
                cmp     distanceToPassageGoingRight
                bcc     uePre2EnemyMovesLeftToPlayer
                jmp     ueEnemyMovesRightToPlayer

.uePre2EnemyMovesLeftToPlayer jmp ueEnemyMovesLeftToPlayer

.ueEnemyStraightDown ldx enemyIndex
                lda     enemyXBlkInternalDecimalOffset,x
                beq     ueEnemyMovesDown
                jmp     ueEnemyMovesLeftToPlayer        ;enemy is not aligned to passage straight down so move a little bit left first

.ueEnemyMovesDown lda    enemyYBlockPos,x
                clc
                adc     #$01
                jsr     calcTileMapRowPtr
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueEnemyStartsFalling            ;empty tile
                cmp     #$32                            ;escape ladder
                beq     ueEnemyStartsFalling
                cmp     #$31                            ;trapdoor
                beq     ueEnemyStartsFalling
                cmp     #$04                            ;line
                bne     ueEnemyMovingDownLadder
.ueEnemyStartsFalling lda #$01
                sta     enemyFalling,x                  ;no solid floor tile, so enemy starts falling
                lda     #$28
                sta     enemyFrameNumber                ;select enemy up/down frame #3 (falling)
                jmp     ueCheckSpecialCases

.ueEnemyMovingDownLadder lda enemyFrames,x
                cmp     #$26
                beq     ueSelectEnemyUpDownFrame
                lda     #$26
                bne     ueSetEnemyUpDownFrame           ;jump always

.ueSelectEnemyUpDownFrame lda #$27
.ueSetEnemyUpDownFrame sta enemyFrameNumber              ;switch between enemy up/down frames
                lda     tmpYPos
                clc
                adc     #$02
                sta     tmpYPos                         ;move enemy down 2px (and adjust internal block offset and block ypos if needed)
                lda     enemyYBlkInternalDecimalOffset,x
                clc
                sed
                adc     #$20
                cld
                sta     enemyYBlkInternalDecimalOffset,x
                lda     enemyYBlockPos,x
                adc     #$00
                sta     enemyYBlockPos,x
                jmp     ueCheckSpecialCases

; player is higher up on screen than the enemy
; if we want the enemy to move up towards the player, there must be no
; obstruction
; first, check if another enemy is obstructing the current enemy by being
; directly above it
.uePlayerHigherThanEnemy jsr calcTileMapRowPtr
                ldx     enemyIndex
                lda     enemyXBlockPos,x
                ldy     numberOfEnemies
.ueCheckIfEnemyAbove pha
                cmp     enemyXBlockPos,y
                bne     ueNextEnemy2
                lda     enemyYBlockPos,x
                sec
                sbc     #$01
                cmp     enemyYBlockPos,y
                bne     ueNextEnemy2
                pla
                jmp     ueCheckSpecialCases             ;yes another enemy is directly above the current enemy

.ueNextEnemy2    pla
                dey
                bpl     ueCheckIfEnemyAbove
; no enemy obstructing the way up towards the player, but maybe something else
; is? scan the tiles to the left of the enemy, in the current row and in the row
; directly beneath it. Kind of measuring the distance from enemy to a passage up
; towards the player for later checking which is better: going left versus going
; right
                ldy     enemyXBlockPos,x
.ueScanRowsLeftOfEnemy2 lda ($80),y                      ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                beq     ueIncDistanceToLeft
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueMovingLeftAndUpImpossible     ;empty tile
                tya
                sec
                sbc     #$1c
                tay
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$03                            ;ladder
                beq     ueStartScanningRowsRightOfEnemy2
                cmp     #$01                            ;brick
                beq     ueMovingLeftAndUpImpossible
                cmp     #$02                            ;solid block
                beq     ueMovingLeftAndUpImpossible
                cmp     #$31                            ;trapdoor
                beq     ueMovingLeftAndUpImpossible
.ueIncDistanceToLeft inc distanceToPassageGoingLeft      ;increase distance to nearest passage of moving left and up to reach the player
                dey
                bpl     ueScanRowsLeftOfEnemy2          ;scan until left edge of screen
.ueMovingLeftAndUpImpossible lda #$ff
                sta     distanceToPassageGoingLeft      ;$ff means there is no route going left
.ueStartScanningRowsRightOfEnemy2 ldy enemyXBlockPos,x
.ueScanRowsRightOfEnemy2 lda ($80),y                     ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                beq     ueIncDistanceToRight
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueMovingRightAndUpImpossible
                tya
                sec
                sbc     #$1c
                tay
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$03                            ;ladder
                beq     ueDetermineEnemyDirection2
                cmp     #$01                            ;brick
                beq     ueMovingRightAndUpImpossible
                cmp     #$02                            ;solid block
                beq     ueMovingRightAndUpImpossible
                cmp     #$31                            ;trapdoor
                beq     ueMovingRightAndUpImpossible
.ueIncDistanceToRight inc distanceToPassageGoingRight    ;increase distance to nearest passage of moving right and up to reach the player
                iny
                cpy     #$1c
                bne     ueScanRowsRightOfEnemy2         ;scan until right edge of screen
.ueMovingRightAndUpImpossible lda #$ff
                sta     distanceToPassageGoingRight     ;$ff means there is no route going right
.ueDetermineEnemyDirection2 lda distanceToPassageGoingLeft
                beq     ueEnemyStraightUp
                lda     distanceToPassageGoingLeft
                cmp     #$ff
                bne     ueAtLeastOneRouteToPlayer2
                lda     distanceToPassageGoingRight
                cmp     #$ff
                bne     ueAtLeastOneRouteToPlayer2
                jmp     ueCheckSpecialCases             ;no route from enemy to player in either direction!

.ueAtLeastOneRouteToPlayer2 lda enemyYBlkInternalDecimalOffset,x
                bne     ueEnemyStraightUp
                lda     distanceToPassageGoingLeft
                cmp     distanceToPassageGoingRight
                bcc     uePre2EnemyMovesLeftToPlayer2
                jmp     ueEnemyMovesRightToPlayer

.uePre2EnemyMovesLeftToPlayer2 jmp ueEnemyMovesLeftToPlayer

.ueEnemyStraightUp ldx   enemyIndex
                lda     enemyYBlockPos,x
                sec
                sbc     #$01
                jsr     calcTileMapRowPtr
                ldx     enemyIndex
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile directly above enemy
                cmp     #$01                            ;brick
                beq     ueCanOnlyMoveUpIfNotAligned
                cmp     #$02                            ;solid block
                beq     ueCanOnlyMoveUpIfNotAligned
                cmp     #$31                            ;trapdoor
                bne     ueEnemyMovingUpLadder
.ueCanOnlyMoveUpIfNotAligned lda enemyYBlkInternalDecimalOffset,x
                bne     ueEnemyMovingUpLadder           ;not vertically aligned to 10px block so can still move up
                jmp     ueCheckSpecialCases

.ueEnemyMovingUpLadder lda enemyXBlockPos,x
                jsr     times10_16bit
                ldx     enemyIndex
                lda     $70
                sta     tmpXPosLo
                lda     $71
                sta     tmpXPosHi
                lda     #$00
                sta     enemyXBlkInternalDecimalOffset,x ;align enemy horizontally (snap to ladder &&&& could be improved)
                lda     enemyFrames,x
                cmp     #$26
                beq     ueSelectEnemyUpDownFrame2
                lda     #$26
                bne     ueSetEnemyUpDownFrame2          ;jump always

.ueSelectEnemyUpDownFrame2 lda #$27
.ueSetEnemyUpDownFrame2 sta enemyFrameNumber             ;switch between enemy up/down frames
                lda     tmpYPos
                sec
                sbc     #$02
                sta     tmpYPos                         ;move enemy up 2px (and adjust internal block offset and block ypos if needed)
                lda     enemyYBlkInternalDecimalOffset,x
                sec
                sed
                sbc     #$20
                cld
                sta     enemyYBlkInternalDecimalOffset,x
                lda     enemyYBlockPos,x
                sbc     #$00
                sta     enemyYBlockPos,x
                jmp     ueCheckSpecialCases

.ueCheckEnemyXPos lda    enemyXBlockPos,x                ;we already know that enemy ypos equals player ypos (in blocks)
                cmp     playerXBlockPos
                beq     uePlayerIsDead                  ;ypos and xpos are matching so enemy kills player
                bcs     uePre1EnemyMovesLeftToPlayer
                bcc     ueEnemyMovesRightToPlayer

.uePlayerIsDead  lda     #$01
                sta     playerIsDead                    ;enemy occupies same block pos as player so that kills the player instantly
                jmp     ueCheckSpecialCases

.uePre1EnemyMovesLeftToPlayer jmp ueEnemyMovesLeftToPlayer

.ueEnemyMovesRightToPlayer ldx enemyIndex
                lda     enemyYBlockPos,x
                ldy     numberOfEnemies
.ueCheckEnemyToTheRight pha
                cmp     enemyYBlockPos,y
                bne     ueNextEnemyToTheRight
                lda     enemyXBlockPos,x
                clc
                adc     #$01
                cmp     enemyXBlockPos,y
                bne     ueNextEnemyToTheRight
                pla
                jmp     ueCheckSpecialCases             ;another enemy is blocking this enemy from moving to the right

.ueNextEnemyToTheRight pla
                dey
                bpl     ueCheckEnemyToTheRight
; no enemy blocking this enemy to the right, but maybe something else?
                lda     enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldy     enemyXBlockPos,x
                iny
                lda     ($80),y                         ;inspect tile directly to the right of enemy
                cmp     #$01                            ;brick
                beq     uePossiblyMoveRightIfAligned
                cmp     #$02                            ;solid block
                beq     uePossiblyMoveRightIfAligned
                cmp     #$31                            ;trapdoor
                bne     ueCheckIfMoveRightOnLine
.uePossiblyMoveRightIfAligned lda enemyXBlkInternalDecimalOffset,x
                cmp     #$20
                beq     ueCannotMoveRight
                jmp     ueCheckIfMoveRightOnLine

.ueCannotMoveRight jmp   ueCheckSpecialCases

.ueCheckIfMoveRightOnLine ldy enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                bne     ueWalkRight
                lda     enemyFrames,x
                cmp     #$29
                bcc     ueSetHangingOnLineFrameA
                cmp     #$2c
                bcs     ueSetHangingOnLineFrameA
                jmp     ueSetHangingOnLineFrameB

.ueSetHangingOnLineFrameA lda #$29
.ueSetHangingOnLineFrameB sec
                sbc     #$29
                tay
                lda     enemyFrameOffset,y
                clc
                adc     #$29
                sta     enemyFrameNumber                ;select correct frame for hanging on a line
                jmp     ueMoveRightUpdatePos

.ueWalkRight     lda     enemyFrames,x
                cmp     #$20
                bcc     ueSetWalkingRightFrameA
                cmp     #$23
                bcs     ueSetWalkingRightFrameA
                jmp     ueSetWalkingRightFrameB

.ueSetWalkingRightFrameA lda #$20
.ueSetWalkingRightFrameB sec
                sbc     #$20
                tay
                lda     enemyFrameOffset,y
                clc
                adc     #$20
                sta     enemyFrameNumber                ;select correct frame for walking right
.ueMoveRightUpdatePos lda tmpXPosLo
                clc
                adc     #$02
                sta     tmpXPosLo
                lda     tmpXPosHi
                adc     #$00
                sta     tmpXPosHi                       ;xpos+=2 and also update block pos and internal block offset
                lda     enemyXBlkInternalDecimalOffset,x
                clc
                sed
                adc     #$20
                cld
                sta     enemyXBlkInternalDecimalOffset,x
                lda     enemyXBlockPos,x
                adc     #$00                            ;update 10px block pos when the decimal counter wraps to 0 (100) again
                sta     enemyXBlockPos,x
                jmp     ueCheckSpecialCases

.ueEnemyMovesLeftToPlayer ldx enemyIndex
                lda     enemyYBlockPos,x
                ldy     numberOfEnemies
.ueCheckEnemyToTheLeft pha
                cmp     enemyYBlockPos,y
                bne     ueNextEnemyToTheLeft
                lda     enemyXBlockPos,x
                sec
                sbc     #$01
                cmp     enemyXBlockPos,y
                bne     ueNextEnemyToTheLeft
                pla
                jmp     ueCheckSpecialCases             ;another enemy is blocking this enemy from moving to the left

.ueNextEnemyToTheLeft pla
                dey
                bpl     ueCheckEnemyToTheLeft
; no enemy blocking this enemy to the left, but maybe something else?
                lda     enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldy     enemyXBlockPos,x
                dey
                lda     ($80),y                         ;inspect tile directly to the left of enemy
                cmp     #$01                            ;brick
                beq     uePossiblyMoveLeftIfAligned
                cmp     #$02                            ;solid block
                beq     uePossiblyMoveLeftIfAligned
                cmp     #$31                            ;trapdoor
                bne     ueCheckIfMoveLeftOnLine
.uePossiblyMoveLeftIfAligned lda enemyXBlkInternalDecimalOffset,x
                bne     ueCheckIfMoveLeftOnLine
                jmp     ueCheckSpecialCases             ;cannot move left

.ueCheckIfMoveLeftOnLine ldy enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                bne     ueWalkLeft
                lda     enemyFrames,x
                cmp     #$2c
                bcc     ueSetHangingOnLineFrameA2
                cmp     #$2f
                bcs     ueSetHangingOnLineFrameA2
                jmp     ueSetHangingOnLineFrameB2

.ueSetHangingOnLineFrameA2 lda #$2c
.ueSetHangingOnLineFrameB2 sec
                sbc     #$2c
                tay
                lda     enemyFrameOffset,y
                clc
                adc     #$2c
                sta     enemyFrameNumber                ;select correct frame for hanging on a line
                jmp     ueMoveLeftUpdatePos

.ueWalkLeft      lda     enemyFrames,x
                cmp     #$23
                bcc     ueSetWalkingLeftFrameA
                cmp     #$26
                bcs     ueSetWalkingLeftFrameA
                jmp     ueSetWalkingLeftFrameB

.ueSetWalkingLeftFrameA lda #$23
.ueSetWalkingLeftFrameB sec
                sbc     #$23
                tay
                lda     enemyFrameOffset,y
                clc
                adc     #$23
                sta     enemyFrameNumber                ;select correct frame for walking left
.ueMoveLeftUpdatePos lda tmpXPosLo
                sec
                sbc     #$02
                sta     tmpXPosLo
                lda     tmpXPosHi
                sbc     #$00
                sta     tmpXPosHi                       ;xpos-=2 and also update block pos and internal block offset
                lda     enemyXBlkInternalDecimalOffset,x
                sec
                sed
                sbc     #$20
                cld
                sta     enemyXBlkInternalDecimalOffset,x
                lda     enemyXBlockPos,x
                sbc     #$00
                sta     enemyXBlockPos,x
                jmp     ueCheckSpecialCases             ;&&&& unneeded

.ueCheckSpecialCases ldx enemyIndex
                lda     enemyXBlkInternalDecimalOffset,x
                bne     ueEnemyCheckGoldIngot
; enemy is horizontally aligned to 10px block
                lda     enemyInHoleHeight,x
                bne     ueEnemyCheckGoldIngot
                lda     enemyInHoleCountdown,x
                bne     ueEnemyCheckGoldIngot
                lda     enemyRespawnCountdown,x
                bne     ueEnemyCheckGoldIngot
                lda     enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldy     enemyXBlockPos,x
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$04                            ;line
                beq     ueEnemyCheckGoldIngot
                cmp     #$03                            ;ladder
                beq     ueEnemyCheckGoldIngot
                tya
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                beq     ueEnemyStartFalling             ;empty tile
                cmp     #$32                            ;escape ladder
                beq     ueEnemyStartFalling
                cmp     #$31                            ;trapdoor
                beq     ueEnemyStartFalling
                cmp     #$04                            ;line
                beq     ueEnemyStartFalling
                cmp     #$05                            ;gold ingot
                beq     ueEnemyStartFalling
                cmp     #$ff                            ;hole
                bne     ueEnemyCheckGoldIngot
; enemy is directly above a hole. Start falling in only if there is no other
; enemy there yet
                ldy     enemyYBlockPos,x
                iny
                tya
                ldy     numberOfEnemies
.ueCheckEnemyBelow pha
                cmp     enemyYBlockPos,y
                bne     ueCheckNextEnemyBelow
                lda     enemyXBlockPos,x
                cmp     enemyXBlockPos,y
                bne     ueCheckNextEnemyBelow
                pla
                jmp     ueEnemyCheckGoldIngot           ;another enemy is already in the hole below the current enemy

.ueCheckNextEnemyBelow pla
                dey
                bpl     ueCheckEnemyBelow
; hole is not occupied so enemy is about to fall into this hole
                lda     #$05
                sta     enemyInHoleHeight,x             ;at very top of hole
                bne     ueEnemyFallingInHole            ;jump always

.ueEnemyStartFalling lda #$01
                sta     enemyFalling,x
.ueEnemyFallingInHole lda #$28
                sta     enemyFrameNumber                ;set falling enemy frame
                jmp     ueRedrawEnemy

.ueEnemyCheckGoldIngot lda enemyYBlockPos,x
                jsr     calcTileMapRowPtr
                ldy     enemyXBlockPos,x
                lda     enemyHoldsGoldIngot,x
                beq     uePossiblyPickupGoldIngot
                lda     enemyYBlkInternalDecimalOffset,x
                bne     ueRedrawEnemy
; enemy has gold ingot and is vertically aligned to 10px block
                lda     ($80),y                         ;inspect tile at exact location of enemy
                bne     ueRedrawEnemy                   ;tile is not empty so cannot leave gold ingot here
                tya
                sta     tmp02                           ;remember current tile offset
                clc
                adc     #$1c
                tay
                lda     ($80),y                         ;inspect tile directly below enemy
                cmp     #$03                            ;ladder
                bne     ueRedrawEnemy
; enemy can leave the gold ingot on an empty tile directly above a ladder
                lda     #$00
                sta     enemyHoldsGoldIngot,x
                ldy     tmp02
                lda     #$05
                sta     ($80),y                         ;place gold ingot at exact location of enemy on tilemap
                jmp     ueEraseOrDrawGoldIngot

.uePossiblyPickupGoldIngot lda enemyXBlkInternalDecimalOffset,x
                bne     ueRedrawEnemy
                lda     ($80),y                         ;inspect tile at exact location of enemy
                cmp     #$05                            ;gold ingot
                bne     ueRedrawEnemy
                lda     #$01
                sta     enemyHoldsGoldIngot,x           ;enemy now holds this gold ingot
                lda     #$00
                sta     ($80),y                         ;remove gold ingot from tilemap
.ueEraseOrDrawGoldIngot lda enemyXBlockPos,x
                jsr     times10_16bit
                ldx     enemyIndex
                lda     enemyYBlockPos,x
                jsr     times10
                lda     #$05                            ;gold ingot
                jsr     plotSprite10x10                 ;erase (when picking up) or draw (when leaving behind) the gold ingot
.ueRedrawEnemy   jsr     uePlotEnemy                     ;erase enemy at old pos
                ldx     enemyIndex
                lda     tmpXPosLo
                sta     enemyXPosLo,x
                lda     tmpXPosHi
                sta     enemyXPosHi,x
                lda     tmpYPos
                sta     enemyYPos,x
                lda     enemyFrameNumber
                sta     enemyFrames,x
                jsr     uePlotEnemy                     ;draw enemy at new pos
                dec     enemyIndex
                bmi     ueDone
                jmp     nextEnemy                       ;repeat until all enemies are updates and redrawn

.ueDone          rts

.uePlotEnemy     ldx     enemyIndex
                lda     enemyXPosLo,x
                sta     $70
                lda     enemyXPosHi,x
                sta     $71
                ldy     enemyYPos,x
                lda     enemyFrames,x
                jmp     plotSprite10x10

.numberOfEnemies equb    $00                             ;holds number of enemies - 1 (so $ff means no enemies)
.enemyIndex      equb    $00
.enemyFrameNumber equb   $00
.distanceToPassageGoingLeft equb $00
.distanceToPassageGoingRight equb $00
.enemyXPosLo     equb    $00                             ;enemy pixel pos (lo)
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyXPosHi     equb    $00                             ;enemy pixel pos (hi)
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyYPos       equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyFrames     equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyXBlockPos  equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyXBlkInternalDecimalOffset equb $00                 ;where pixel offset is 0,2,4,6,8 in a 10px block, this one goes 0,20,40,60,80 in decimal
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyYBlockPos  equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyYBlkInternalDecimalOffset equb $00                 ;where pixel offset is 0,2,4,6,8 in a 10px block, this one goes 0,20,40,60,80 in decimal
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyFalling    equb    $00                             ;0=normal, 1=falling
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyCounter    equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyInHoleHeight equb  $00                             ;5=top of hole, 4, 3, 2, 1, 0=bottom of hole (5*2px=10px)
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyInHoleCountdown equb $00                           ;time spent by enemy in hole before climbing out, starting at &1E, counting down to 0
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyRespawnCountdown equb $00                          ;countdown from 10 to 0 before enemy is respawned at the top of the screen after being buried (not just trapped) in a hole
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyHoldsGoldIngot equb $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.enemyFrameOffset equb   $01
                equb    $02
                equb    $00
                equb    $04
                equb    $05
                equb    $03
.tmp01           equb    $00                             ;&&&& NOTE: many, many variables could and should be moved to zpage!
.seemsUnused1    equb    $00                             ;&&&& unused
.tmp02           equb    $00
.tmp03           equb    $00
.tmp04           equb    $00
.tmp05           equb    $00
.tmp06           equb    $00
.tmp07           equb    $00
.oldPlayerFrameNumber equb $00
.oldPlayerXPosLo equb    $00
.oldPlayerXPosHi equb    $00
.oldPlayerYPos   equb    $00
.playerXBlkInternalDecimalOffset equb $00
.playerXBlockPos equb    $00
.playerYBlkInternalDecimalOffset equb $00
.playerYBlockPos equb    $00
.xBlockPos       equb    $00
.yBlockPos       equb    $00
.textColour      equb    $00
.textColourMask  equb    $00
.colourisedByte  equb    $00
.keysPressed     equb    $00
.lives           equb    $05
.level           equb    $01
.numberOfGoldIngots equb $00
.playingSoundAllGold equb $00
.soundIndexAllGold equb  $00
.soundPitchWhileFalling equb $00
.score           equb    $00                             ;7 digits, BCD in 4 bytes
                equb    $00
                equb    $00
                equb    $00
.sound2          equb    $01                             ;channel
                equb    $00
                equb    $01                             ;volume
                equb    $00
.pitch2          equb    $00                             ;pitch
                equb    $00
                equb    $00                             ;duration
                equb    $00
.sound4          equb    $02                             ;channel
                equb    $00
                equb    $01                             ;volume
                equb    $00
                equb    $3c                             ;pitch
                equb    $00
                equb    $02                             ;duration
                equb    $00
.sound5          equb    $13                             ;channel
                equb    $00
                equb    $f1                             ;volume
                equb    $ff
.pitch5          equb    $3c                             ;pitch
                equb    $00
                equb    $04                             ;duration
                equb    $00
.sound3          equb    $02                             ;channel
                equb    $00
                equb    $01                             ;volume
                equb    $00
.pitch3          equb    $00                             ;pitch3
                equb    $00
                equb    $01                             ;duration
                equb    $00
.sound1          equb    $11                             ;channel (2 bytes)
                equb    $00
                equb    $01                             ;volume (2 bytes)
                equb    $00
.pitch1          equb    $00                             ;pitch (2 bytes)
                equb    $00
                equb    $63                             ;duration (2 bytes)
                equb    $00
.strSaveLevels   equs    "SAVE LEVELS 2C99 4FE0",$0d     ;&&&& these addresses will change if you move stuff around
.strLoadLevels   equs    "LOAD LEVELS 2C99",$0d          ;&&&& these addresses will change if you move stuff around
.strTape         equs    "TAPE"
.soundPitchValuesAllGold equb $51
                equb    $65
                equb    $75
                equb    $81
                equb    $75
                equb    $81
.soundDurationValuesAllGold equb $02
                equb    $02
                equb    $02
                equb    $05
                equb    $02
                equb    $05
                equb    $00
                equb    $00
.soundPitchValuesLevelComplete equb $51
                equb    $59
                equb    $61
                equb    $65
                equb    $6d
                equb    $75
                equb    $7d
                equb    $85
                equb    $8d
                equb    $95
                equb    $9d
                equb    $a5
                equb    $ad
                equb    $b5
                equb    $bd
.soundPitchValuesForGold equb $00
                equb    $6d
                equb    $61
                equb    $55
                equb    $59
                equb    $5d
.spriteBuffer
; sprite buffer: 10 lines, 4 bytes per line, line order
.spriteBufferLine0 equb  $00                             ;1st line
                equb    $00
                equb    $00
                equb    $00
.spriteBufferLine1 equb  $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.spriteBufferLine9 equb  $00                             ;10th (last) line
                equb    $00
                equb    $00
                equb    $00
.spriteAddr16    equw    $1f47
                equw    $1f65
                equw    $1f83
                equw    $1fa1
                equw    $1fbf
                equw    $1fdd
                equw    $1ffb
                equw    $2019
                equw    $2037
                equw    $2055
                equw    $2073
                equw    $2091
                equw    $20af
                equw    $20cd
                equw    $20eb
                equw    $2109
                equw    $2127
                equw    $2145
                equw    $2163
                equw    $2181
                equw    $219f
                equw    $21bd
                equw    $21db
                equw    $21f9
                equw    $2217
                equw    $2235
                equw    $2253
                equw    $2271
                equw    $228f
                equw    $22ad
                equw    $22cb
                equw    $22e9
                equw    $2307
                equw    $2325
                equw    $2343
                equw    $2361
                equw    $237f
                equw    $239d
                equw    $23bb
                equw    $23d9
                equw    $23f7
                equw    $2415
                equw    $2433
                equw    $2451
                equw    $246f
                equw    $248d
                equw    $24ab
                equw    $24c9
                equw    $24e7
                equw    $2505
                equw    $2523
.screenAddrHi    equb    $4f
                equb    $52
                equb    $54
                equb    $56
                equb    $58
                equb    $5a
                equb    $5d
                equb    $5f
                equb    $61
                equb    $63
                equb    $65
                equb    $67
                equb    $6a
                equb    $6c
                equb    $6e
                equb    $70
                equb    $72
                equb    $75
                equb    $77
                equb    $79
                equb    $7b
                equb    $7d
                equb    $00
                equb    $00
                equb    $00
.screenAddrLo    equb    $e0
                equb    $10
                equb    $40
                equb    $70
                equb    $a0
                equb    $d0
                equb    $00
                equb    $30
                equb    $60
                equb    $90
                equb    $c0
                equb    $f0
                equb    $20
                equb    $50
                equb    $80
                equb    $b0
                equb    $e0
                equb    $10
                equb    $40
                equb    $70
                equb    $a0
                equb    $d0
                equb    $00
                equb    $00
                equb    $00
.colourMaskLeftPixel equb $00
                equb    $08
                equb    $80
                equb    $88
.encStrScore     equb    $0d                             ;S
                equb    $01                             ;C
                equb    $0a                             ;O
                equb    $0c                             ;R
                equb    $03                             ;E
.encStrLevel     equb    $07                             ;L
                equb    $03                             ;E
                equb    $10                             ;V
                equb    $03                             ;E
                equb    $07                             ;L
.unitValues      equb    100
                equb    10
.keyCodesMovement equb   $e1                             ;Z
                equb    $c2                             ;X
                equb    $e8                             ;/
                equb    $c8                             ;:
                equb    $c9                             ;RETURN
.movementBitMask equb    %00000100                       ;left
                equb    %00001000                       ;right
                equb    %00000010                       ;down
                equb    %00000001                       ;up
                equb    %00010000                       ;dig
; sprite data in MODE 1 format, line order
; each sprite is 10x10px and takes 30 bytes
; 10 lines of 3 bytes each
.spriteData      equw    $ffff                           ;00=cursor block (white)
                equw    $ffcc
                equw    $ccff
                equw    $ffff
                equw    $ffcc
                equw    $ccff
                equw    $ffff
                equw    $ffcc
                equw    $ccff
                equw    $ffff
                equw    $ffcc
                equw    $ccff
                equw    $ffff
                equw    $ffcc
                equw    $ccff
                equw    $0e0f                           ;01=brick (red)
                equw    $0f04
                equw    $040e
                equw    $0e0f
                equw    $0f04
                equw    $040e
                equw    $0000
                equw    $0900
                equw    $0c0f
                equw    $0f09
                equw    $090c
                equw    $0c0f
                equw    $0f09
                equw    $000c
                equw    $0000
                equw    $0f0f                           ;02=solid block (red)
                equw    $0f0c
                equw    $0c0f
                equw    $0f0f
                equw    $0f0c
                equw    $0c0f
                equw    $0f0f
                equw    $0f0c
                equw    $0c0f
                equw    $0f0f
                equw    $0f0c
                equw    $0c0f
                equw    $0f0f
                equw    $000c
                equw    $0000
                equw    $11cc                           ;03=ladder (white)
                equw    $cc88
                equw    $8811
                equw    $ffff
                equw    $cc88
                equw    $8811
                equw    $11cc
                equw    $cc88
                equw    $8811
                equw    $11cc
                equw    $ff88
                equw    $88ff
                equw    $11cc
                equw    $cc88
                equw    $8811
                equw    $0000                           ;04=line (white)
                equw    $ff00
                equw    $ccff
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000                           ;05=gold ingot (red/white)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $ffff
                equw    $cf00
                equw    $003f
                equw    $3fcf
                equw    $cf00
                equw    $003f
                equw    $ffff
                equw    $0000
                equw    $0000
                equw    $0f0f                           ;06=thick bar (red)
                equw    $0f0c
                equw    $0c0f
                equw    $0f0f
                equw    $0f0c
                equw    $0c0f
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $cc00                           ;07=player right 1 (white)
                equw    $0000
                equw    $00cc
                equw    $8811
                equw    $4400
                equw    $00cc
                equw    $3399
                equw    $1100
                equw    $0000
                equw    $8811
                equw    $ee00
                equw    $0044
                equw    $4400
                equw    $0000
                equw    $0044
                equw    $cc00                           ;08=player right 2 (white)
                equw    $0000
                equw    $00cc
                equw    $8800
                equw    $1100
                equw    $0088
                equw    $cc33
                equw    $3300
                equw    $00aa
                equw    $cc00
                equw    $1100
                equw    $00cc
                equw    $0033
                equw    $1100
                equw    $0000
                equw    $cc00                           ;09=player right 3 (white)
                equw    $0000
                equw    $00cc
                equw    $8800
                equw    $3300
                equw    $0088
                equw    $ee44
                equw    $0000
                equw    $0088
                equw    $cc11
                equw    $2200
                equw    $0022
                equw    $2244
                equw    $4400
                equw    $0000
                equw    $0033                           ;10=player left 1 (white)
                equw    $3300
                equw    $0000
                equw    $8811
                equw    $3300
                equw    $0022
                equw    $99cc
                equw    $0000
                equw    $0088
                equw    $8811
                equw    $2200
                equw    $0077
                equw    $0022
                equw    $2200
                equw    $0000
                equw    $0033                           ;11=player left 2 (white)
                equw    $3300
                equw    $0000
                equw    $0011
                equw    $1100
                equw    $0088
                equw    $cc33
                equw    $5500
                equw    $00cc
                equw    $0033
                equw    $3300
                equw    $0088
                equw    $cc00
                equw    $0000
                equw    $0088
                equw    $0033                           ;12=player left 3 (white)
                equw    $3300
                equw    $0000
                equw    $0011
                equw    $1100
                equw    $00cc
                equw    $2277
                equw    $1100
                equw    $0000
                equw    $8833
                equw    $4400
                equw    $0044
                equw    $2244
                equw    $0000
                equw    $0022
                equw    $8800                           ;13=player up/down 1 (white)
                equw    $0000
                equw    $0088
                equw    $ff00
                equw    $7788
                equw    $00cc
                equw    $cc00
                equw    $0000
                equw    $00cc
                equw    $2211
                equw    $1100
                equw    $0033
                equw    $0011
                equw    $3300
                equw    $0000
                equw    $4400                           ;14=player up/down 2 (white)
                equw    $0000
                equw    $0044
                equw    $cc77
                equw    $0000
                equw    $88ff
                equw    $cc00
                equw    $0000
                equw    $00cc
                equw    $2211
                equw    $3300
                equw    $0022
                equw    $2200
                equw    $0000
                equw    $0033
                equw    $0044                           ;15=player up/down 3 (white) falling (?)
                equw    $4488
                equw    $88cc
                equw    $cc44
                equw    $3388
                equw    $00ff
                equw    $4400
                equw    $1100
                equw    $00cc
                equw    $4422
                equw    $2200
                equw    $0044
                equw    $4422
                equw    $0000
                equw    $0044
                equw    $1122                           ;16=player hanging from line 1 (white)
                equw    $0000
                equw    $0000
                equw    $5522
                equw    $2200
                equw    $0066
                equw    $cc11
                equw    $0000
                equw    $0088
                equw    $8833
                equw    $4400
                equw    $0088
                equw    $8844
                equw    $1100
                equw    $0000
                equw    $4400                           ;17=player hanging from line 2 (white)
                equw    $0000
                equw    $0000
                equw    $cc11
                equw    $7700
                equw    $0088
                equw    $0099
                equw    $1100
                equw    $0000
                equw    $0033
                equw    $4400
                equw    $0088
                equw    $8844
                equw    $4400
                equw    $0088
                equw    $0022                           ;18=player hanging from line 3 (white)
                equw    $0000
                equw    $0000
                equw    $8833
                equw    $1100
                equw    $0099
                equw    $ee00
                equw    $0000
                equw    $0088
                equw    $8811
                equw    $2200
                equw    $0044
                equw    $4422
                equw    $2200
                equw    $0044
                equw    $1122                           ;19=player hanging from line 4 (white)
                equw    $0000
                equw    $0000
                equw    $9922
                equw    $1100
                equw    $0099
                equw    $ee00
                equw    $0000
                equw    $0044
                equw    $7700
                equw    $0000
                equw    $8844
                equw    $4400
                equw    $0088
                equw    $0022
                equw    $0022                           ;20=player hanging from line 5 (white)
                equw    $0000
                equw    $0000
                equw    $8833
                equw    $1100
                equw    $00ee
                equw    $9900
                equw    $0000
                equw    $0088
                equw    $cc00
                equw    $1100
                equw    $0022
                equw    $2211
                equw    $1100
                equw    $0022
                equw    $4400                           ;21=player hanging from line 6 (white)
                equw    $0000
                equw    $0000
                equw    $cc11
                equw    $9900
                equw    $0088
                equw    $0077
                equw    $1100
                equw    $0000
                equw    $8811
                equw    $2200
                equw    $0044
                equw    $4422
                equw    $2200
                equw    $0044
                equw    $8811                           ;22=player standing facing right (white)
                equw    $1100
                equw    $0088
                equw    $0011
                equw    $7700
                equw    $00cc
                equw    $2299
                equw    $1100
                equw    $0000
                equw    $8811
                equw    $2200
                equw    $0044
                equw    $4422
                equw    $2200
                equw    $0044
                equw    $3300                           ;23=player standing facing left (white)
                equw    $0000
                equw    $0033
                equw    $1100
                equw    $0000
                equw    $cc77
                equw    $9900
                equw    $0022
                equw    $0011
                equw    $3300
                equw    $0000
                equw    $8844
                equw    $4400
                equw    $0088
                equw    $8844
                equw    $c030                           ;24=empty?
                equw    $3000
                equw    $00f0
                equw    $0c0f
                equw    $0f0c
                equw    $0c0c
                equw    $0000
                equw    $0c00
                equw    $0c0f
                equw    $0f0c
                equw    $0c0c
                equw    $0c0f
                equw    $0f0c
                equw    $000c
                equw    $0000
                equw    $0000                           ;25=acid digging a hole high position (cyan)
                equw    $0000
                equw    $00c0
                equw    $f000
                equw    $3000
                equw    $00f0
                equw    $0000
                equw    $0c00
                equw    $0c0f
                equw    $0f0c
                equw    $0c0c
                equw    $0c0f
                equw    $0f0c
                equw    $000c
                equw    $0000
                equw    $0000                           ;26=acid digging a hole medium position (cyan)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $00c0
                equw    $c030
                equw    $3000
                equw    $00f0
                equw    $0f0c
                equw    $0c0c
                equw    $0c0f
                equw    $0f0c
                equw    $000c
                equw    $0000
                equw    $0000                           ;27=acid digging a hole low position (cyan)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $00c0
                equw    $f000
                equw    $3000
                equw    $00f0
                equw    $0f0c
                equw    $000c
                equw    $0000
                equw    $0000                           ;28=acid digging a hole lowest position (cyan)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $00c0
                equw    $c030
                equw    $3000
                equw    $00f0
                equw    $0000                           ;29=hole filling up again at low position (red)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0c00
                equw    $0c00
                equw    $000c
                equw    $000c
                equw    $0000
                equw    $0000                           ;30=hole filling up again at medium position (red)
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0c00
                equw    $0c00
                equw    $000c
                equw    $0c0c
                equw    $0c00
                equw    $000c
                equw    $000c
                equw    $0000
                equw    $0000                           ;31=hole completely empty // doubling as first enemy respawn frame?
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $c000                           ;32=enemy right 1 (cyan)
                equw    $0000
                equw    $00c0
                equw    $8010
                equw    $4000
                equw    $00c0
                equw    $3090
                equw    $1000
                equw    $0000
                equw    $8010
                equw    $e000
                equw    $0040
                equw    $4000
                equw    $0000
                equw    $0040
                equw    $c000                           ;33=enemy right 2 (cyan)
                equw    $0000
                equw    $00c0
                equw    $8000
                equw    $1000
                equw    $0080
                equw    $c030
                equw    $3000
                equw    $00a0
                equw    $c000
                equw    $1000
                equw    $00c0
                equw    $0030
                equw    $1000
                equw    $0000
                equw    $c000                           ;34=enemy right 3 (cyan)
                equw    $0000
                equw    $00c0
                equw    $8000
                equw    $3000
                equw    $0080
                equw    $e040
                equw    $0000
                equw    $0080
                equw    $c010
                equw    $2000
                equw    $0020
                equw    $2040
                equw    $4000
                equw    $0000
                equw    $0030                           ;35=enemy left 1 (cyan)
                equw    $3000
                equw    $0000
                equw    $8010
                equw    $3000
                equw    $0020
                equw    $90c0
                equw    $0000
                equw    $0080
                equw    $8010
                equw    $2000
                equw    $0070
                equw    $0020
                equw    $2000
                equw    $0000
                equw    $0030                           ;36=enemy left 2 (cyan)
                equw    $3000
                equw    $0000
                equw    $0010
                equw    $1000
                equw    $0080
                equw    $c030
                equw    $5000
                equw    $00c0
                equw    $0030
                equw    $3000
                equw    $0080
                equw    $c000
                equw    $0000
                equw    $0080
                equw    $0030                           ;37=enemy left 3 (cyan)
                equw    $3000
                equw    $0000
                equw    $0010
                equw    $1000
                equw    $00c0
                equw    $2070
                equw    $1000
                equw    $0000
                equw    $8030
                equw    $4000
                equw    $0040
                equw    $2040
                equw    $0000
                equw    $0020
                equw    $8000                           ;38=enemy up/down 1 (cyan)
                equw    $0000
                equw    $0080
                equw    $f000
                equw    $7080
                equw    $00c0
                equw    $c000
                equw    $0000
                equw    $00c0
                equw    $2010
                equw    $1000
                equw    $0030
                equw    $0010
                equw    $3000
                equw    $0000
                equw    $4000                           ;39=enemy up/down 2 (cyan)
                equw    $0000
                equw    $0040
                equw    $c070
                equw    $0000
                equw    $80f0
                equw    $c000
                equw    $0000
                equw    $00c0
                equw    $2010
                equw    $3000
                equw    $0020
                equw    $2000
                equw    $0000
                equw    $0030
                equw    $0040                           ;40=enemy up/down 3 (cyan) falling (?)
                equw    $4080
                equw    $80c0
                equw    $c040
                equw    $3080
                equw    $00f0
                equw    $4000
                equw    $1000
                equw    $00c0
                equw    $4020
                equw    $2000
                equw    $0040
                equw    $4020
                equw    $0000
                equw    $0040
                equw    $1020                           ;41=enemy hanging from line 1 (cyan)
                equw    $0000
                equw    $0000
                equw    $5020
                equw    $2000
                equw    $0060
                equw    $c010
                equw    $0000
                equw    $0080
                equw    $8030
                equw    $4000
                equw    $0080
                equw    $8040
                equw    $1000
                equw    $0000
                equw    $4000                           ;42=enemy hanging from line 2 (cyan)
                equw    $0000
                equw    $0000
                equw    $c010
                equw    $7000
                equw    $0080
                equw    $0090
                equw    $1000
                equw    $0000
                equw    $0030
                equw    $4000
                equw    $0080
                equw    $8040
                equw    $4000
                equw    $0080
                equw    $0020                           ;43=enemy hanging from line 3 (cyan)
                equw    $0000
                equw    $0000
                equw    $8030
                equw    $1000
                equw    $0090
                equw    $e000
                equw    $0000
                equw    $0080
                equw    $8010
                equw    $2000
                equw    $0040
                equw    $4020
                equw    $2000
                equw    $0040
                equw    $1020                           ;44=enemy hanging from line 4 (cyan)
                equw    $0000
                equw    $0000
                equw    $9020
                equw    $1000
                equw    $0090
                equw    $e000
                equw    $0000
                equw    $0080
                equw    $e000
                equw    $0000
                equw    $0090
                equw    $9000
                equw    $0000
                equw    $0040
                equw    $0020                           ;45=enemy hanging from line 5 (cyan)
                equw    $0000
                equw    $0000
                equw    $8030
                equw    $1000
                equw    $00e0
                equw    $9000
                equw    $0000
                equw    $0080
                equw    $c000
                equw    $1000
                equw    $0020
                equw    $2010
                equw    $1000
                equw    $0020
                equw    $4000                           ;46=enemy hanging from line 6 (cyan)
                equw    $0000
                equw    $0000
                equw    $c010
                equw    $9000
                equw    $0080
                equw    $0070
                equw    $1000
                equw    $0000
                equw    $8010
                equw    $2000
                equw    $0040
                equw    $4020
                equw    $2000
                equw    $0040
                equw    $0000                           ;47=tiny blob i.e. enemy respawn #1
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $7000
                equw    $80f0
                equw    $0000                           ;48=blob (cyan) = enemy respawn #2
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $0000
                equw    $1000
                equw    $00e0
                equw    $f070
                equw    $7080
                equw    $80f0
                equw    $0f0f                           ;49=trapdoor (red/white)
                equw    $0f0c
                equw    $0c0f
                equw    $0000
                equw    $3300
                equw    $00ff
                equw    $cc00
                equw    $0000
                equw    $00cc
                equw    $cc00
                equw    $0f00
                equw    $0c0f
                equw    $0f0f
                equw    $000c
                equw    $0000
                equw    $00cc                           ;50=escape ladder (white)
                equw    $cc00
                equw    $0000
                equw    $ffff
                equw    $cc00
                equw    $0033
                equw    $3300
                equw    $0000
                equw    $0033
                equw    $33cc
                equw    $ff00
                equw    $00ff
                equw    $00cc
                equw    $cc00
                equw    $0000
; letters and digits in 1bpp format, 8 bytes per symbol 
.alphaNumSprites equb    %00111111                       ;A (0)
                equb    %00110011
                equb    %00110011
                equb    %11111111
                equb    %11000011
                equb    %11000011
                equb    %11001111
                equb    %11001111
                equb    %11111111                       ;C (1)
                equb    %11000011
                equb    %11000000
                equb    %11000000
                equb    %11110000
                equb    %11110000
                equb    %11110011
                equb    %11111111
                equb    %11111100                       ;D (2)
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11111100
                equb    %11111111                       ;E (3)
                equb    %11110000
                equb    %11110000
                equb    %11111100
                equb    %11000000
                equb    %11000000
                equb    %11000000
                equb    %11111111
                equb    %11111111                       ;G (4)
                equb    %11000011
                equb    %11000000
                equb    %11000000
                equb    %11001111
                equb    %11001111
                equb    %11000011
                equb    %11111111
                equb    %11000011                       ;H (5)
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %00110000                       ;I (6)
                equb    %00110000
                equb    %00110000
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %11000000                       ;L (7)
                equb    %11000000
                equb    %11000000
                equb    %11110000
                equb    %11110000
                equb    %11110000
                equb    %11110000
                equb    %11111111
                equb    %11000011                       ;M (8)
                equb    %11110011
                equb    %11111111
                equb    %11111111
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11000011                       ;N (9)
                equb    %11000011
                equb    %11110011
                equb    %11111111
                equb    %11111111
                equb    %11001111
                equb    %11000011
                equb    %11000011
                equb    %11111111                       ;O (10)
                equb    %11001111
                equb    %11001111
                equb    %11001111
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %11111111                       ;P (11)
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %11110000
                equb    %11110000
                equb    %11110000
                equb    %11110000
                equb    %11111111                       ;R (12)
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %11111100
                equb    %11111100
                equb    %11110011
                equb    %11110011
                equb    %11111111                       ;S (13)
                equb    %11000011
                equb    %11000000
                equb    %11111111
                equb    %00001111
                equb    %00001111
                equb    %11001111
                equb    %11111111
                equb    %11111111                       ;T (14)
                equb    %00110000
                equb    %00110000
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %11000011                       ;U (15)
                equb    %11000011
                equb    %11000011
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11111111
                equb    %11110011                       ;V (16)
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11110011
                equb    %11111111
                equb    %00111100
                equb    %00110000
                equb    %11001111                       ;Y (17)
                equb    %11001111
                equb    %11001111
                equb    %11111111
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %00111100
                equb    %11111111                       ;0 (18)
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11001111
                equb    %11001111
                equb    %11001111
                equb    %11111111
                equb    %01111000                       ;1 (19)
                equb    %01111000
                equb    %00011000
                equb    %00011000
                equb    %00011000
                equb    %00011000
                equb    %01111110
                equb    %01111110
                equb    %11111111                       ;2 (20)
                equb    %11000011
                equb    %00000011
                equb    %11111111
                equb    %11000000
                equb    %11000000
                equb    %11001111
                equb    %11111111
                equb    %11111111                       ;3 (21)
                equb    %11000011
                equb    %00000011
                equb    %00111111
                equb    %00000011
                equb    %00000011
                equb    %11000011
                equb    %11111111
                equb    %11110011                       ;4 (22)
                equb    %11110011
                equb    %11110011
                equb    %11111111
                equb    %00000011
                equb    %00000011
                equb    %00000011
                equb    %00000011
                equb    %11111111                       ;5 (23)
                equb    %11000000
                equb    %11000000
                equb    %11111111
                equb    %00001111
                equb    %00001111
                equb    %00001111
                equb    %11111111
                equb    %11111111                       ;6 (24)
                equb    %11000011
                equb    %11000000
                equb    %11111111
                equb    %11000111
                equb    %11000111
                equb    %11000111
                equb    %11111111
                equb    %11111111                       ;7 (25)
                equb    %00001111
                equb    %00001111
                equb    %00001111
                equb    %00111100
                equb    %00110000
                equb    %00110000
                equb    %00110000
                equb    %00111111                       ;8 (26)
                equb    %00110011
                equb    %00110011
                equb    %11111111
                equb    %11000011
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %11111111                       ;9 (27)
                equb    %11000011
                equb    %11000011
                equb    %11111111
                equb    %00001111
                equb    %00001111
                equb    %00001111
                equb    %00001111
                equb    %00000000                       ;space (28)
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
;  
                equb    %01111110                       ;] (29)
                equb    %00000110
                equb    %00000110
                equb    %00000110
                equb    %00011110
                equb    %00011110
                equb    %00011110
                equb    %01111110
;  
                equb    %00000000                       ;. (30)
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %00000000
                equb    %11000000
                equb    %11000000
; tilemap for current level, 28*(16+1)=476 tiles
.tileMap         equb    $00
                equb    $00
                equb    $00
                equb    $05
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $03
                equb    $02
                equb    $02
                equb    $01
                equb    $02
                equb    $02
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $05
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $03
                equb    $00
                equb    $05
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $03
                equb    $00
                equb    $05
                equb    $00
                equb    $23
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $03
                equb    $03
                equb    $01
                equb    $02
                equb    $01
                equb    $02
                equb    $01
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $03
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $00
                equb    $00
                equb    $23
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $02
                equb    $02
                equb    $02
                equb    $02
                equb    $02
                equb    $02
                equb    $03
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $05
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $23
                equb    $00
                equb    $03
                equb    $00
                equb    $05
                equb    $00
                equb    $00
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $02
                equb    $01
                equb    $01
                equb    $01
                equb    $02
                equb    $01
                equb    $01
                equb    $02
                equb    $01
                equb    $01
                equb    $02
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $03
                equb    $01
                equb    $01
                equb    $02
                equb    $01
                equb    $01
                equb    $01
                equb    $02
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $02
                equb    $05
                equb    $00
                equb    $00
                equb    $02
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $04
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $05
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $03
                equb    $01
                equb    $01
                equb    $01
                equb    $02
                equb    $02
                equb    $02
                equb    $02
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $07
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $03
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
; bottom row of tilemap is always 28 bricks
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
                equb    $01
; very last row of tilemap is always 28 red bar blocks
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06
                equb    $06

.editLevel       lda     #$01
                sta     levelEditInProgress
                jsr     drawLevel
                lda     #$00
                sta     levelEditInProgress
                sta     xBlockPos
                sta     yBlockPos
                jsr     plotSpriteAtCursor              ;draw white cursor block
.checkDoneEditing ldx    #$f0                            ;key code for ESCAPE (eor &80)
                lda     #$79
                jsr     OSBYTE                          ;scan key
                cpx     #$00
                bpl     continueEditing                 ;ESCAPE was not pressed, keep editing
                jsr     storeEditedLevel
                jmp     startGame

.continueEditing lda     xBlockPos
                sta     tmpXPosLo
                lda     yBlockPos
                sta     tmpYPos
                jsr     readJoystickAndKeys
                lda     keysPressed
                and     #$08                            ;going right?
                beq     checkCursorLeft
                lda     tmpXPosLo
                cmp     #$1b                            ;cannot move right if we are at xpos 27 already
                beq     checkCursorLeft
                inc     tmpXPosLo                       ;move cursor 1 block right
.checkCursorLeft lda     keysPressed
                and     #$04                            ;going left?
                beq     checkCursorUp
                lda     tmpXPosLo
                beq     checkCursorUp                   ;cannot move left if we are at xpos 0 already
                dec     tmpXPosLo                       ;move cursor 1 block left
.checkCursorUp   lda     keysPressed
                and     #$01                            ;going up?
                beq     checkCursorDown
                lda     tmpYPos
                beq     checkCursorDown                 ;cannot move up if ypos already 0
                dec     tmpYPos                         ;move cursor 1 block up
.checkCursorDown lda     keysPressed
                and     #$02                            ;going down
                beq     checkDigitKeys
                lda     tmpYPos
                cmp     #$0f                            ;cannot move down if ypos already 15
                beq     checkDigitKeys
                inc     tmpYPos
.checkDigitKeys  jsr     scanKeys0to9
; this delay is in edit mode only
                lda     #$13
                jsr     OSBYTE                          ;*FX19
                lda     #$13
                jsr     OSBYTE                          ;*FX19
                lda     #$13
                jsr     OSBYTE                          ;*FX19
                lda     #$13
                jsr     OSBYTE                          ;*FX19
                lda     #$00
                jsr     plotSpriteAtCursor              ;erase cursor at old pos
                lda     tmpXPosLo
                sta     xBlockPos
                lda     tmpYPos
                sta     yBlockPos
                lda     keyCodes0to9Index
                beq     drawCursor
; pressed one of the digit keys, i.e. plot the corresponding tile
                lda     yBlockPos
                jsr     calcTileMapRowPtr
                ldy     xBlockPos
                lda     ($80),y
                beq     drawNewTile                     ;no need to erase an empty tile in the tilemap
                jsr     plotSpriteAtCursor              ;erase old tile on the map first
.drawNewTile     lda     yBlockPos                       ;&&&& no need to do this calc all over again?
                jsr     calcTileMapRowPtr
                ldy     xBlockPos
                ldx     keyCodes0to9Index
                lda     levelNibbleToTile,x
                sta     ($80),y                         ;store new tile in tilemap
                beq     drawCursor                      ;no need to draw an empty tile
                jsr     plotSpriteAtCursor              ;draw new tile on screen
.drawCursor      lda     #$00
                jsr     plotSpriteAtCursor              ;and EOR the cursor on top of it
                jmp     checkDoneEditing

.plotSpriteAtCursor pha
                lda     xBlockPos
                jsr     times10_16bit
                lda     yBlockPos
                jsr     times10
                pla
                jmp     plotSprite10x10

.buildTileMap    lda     #<levelData
                sta     $70
                lda     #>levelData
                sta     $71
                ldx     level
                dex                                     ;make level zero based
                beq     calcDone
.add224          lda     $70                             ;calc levelData+(level-1)*224
                clc
                adc     #$e0
                sta     $70
                lda     $71
                adc     #$00
                sta     $71
                dex
                bne     add224
.calcDone        lda     #<tileMap
                sta     sm_storeByteInTileMap+1
                lda     #>tileMap
                sta     sm_storeByteInTileMap+2
                ldy     #$00
.nextByteOfLevelData lda ($70),y                         ;get byte from level data
                pha
                lsr     a
                lsr     a
                lsr     a
                lsr     a
                tax                                     ;high nibble
                lda     levelNibbleToTile,x
                jsr     sm_storeByteInTileMap
                pla
                and     #$0f
                tax                                     ;low nibble
                lda     levelNibbleToTile,x
                jsr     sm_storeByteInTileMap
                iny
                cpy     #$e0                            ;224 bytes = 448 tiles (28*16) of level data
                bne     nextByteOfLevelData
                rts

.sm_storeByteInTileMap sta $8000                         ;selfmod; store in tilemap
                inc     sm_storeByteInTileMap+1         ;update tilemap ptr
                bne     noinc_L294A
                inc     sm_storeByteInTileMap+2
.noinc_L294A     rts

.storeEditedLevel lda    #<levelData
                sta     $70
                lda     #>levelData
                sta     $71
                ldx     level
                dex
                beq     seCalcDone
.seAdd224        lda     $70                             ;calc levelData+(level-1)*224
                clc
                adc     #$e0
                sta     $70
                lda     $71
                adc     #$00
                sta     $71
                dex
                bne     seAdd224
.seCalcDone      lda     #<tileMap
                sta     sm_ConvertTileToLevelNibble+1
                lda     #>tileMap
                sta     sm_ConvertTileToLevelNibble+2
                ldy     #$00
.seTilesToLevelData jsr  sm_ConvertTileToLevelNibble     ;get first tile
                asl     a
                asl     a
                asl     a
                asl     a
                sta     $80                             ;store in high nibble
                jsr     sm_ConvertTileToLevelNibble     ;get second tile
                ora     $80                             ;store in low nibble
                sta     ($70),y                         ;store level data byte (equals 2 tiles from tilemap)
                iny
                cpy     #$e0                            ;do 28*16=448 tiles (224 bytes)
                bne     seTilesToLevelData
                rts

.sm_ConvertTileToLevelNibble lda $8000                   ;selfmod, get tile
                ldx     #$00
.findData        cmp     levelNibbleToTile,x
                beq     dataFound
                inx
                cpx     #$0a
                bne     findData
.dataFound       txa
                inc     sm_ConvertTileToLevelNibble+1
                bne     noinc_L29A3
                inc     sm_ConvertTileToLevelNibble+2
.noinc_L29A3     rts

.scanKeys0to9    ldx     #$00
.checkNextKey    stx     keyCodes0to9Index
                lda     keyCodes0to9,x
                tax
                lda     #$79
                jsr     OSBYTE                          ;scan for key
                cpx     #$00
                bpl     keyNotPressed                   ;key was not pressed
                jmp     keyWasPressed

.keyNotPressed   ldx     keyCodes0to9Index
                inx
                cpx     #$0a                            ;scan 10 keys (0..9)
                bne     checkNextKey
                lda     #$ff
                sta     keyCodes0to9Index
.keyWasPressed   inc     keyCodes0to9Index               ;0 means none of the digit keys pressed, otherwise 1=1, 2=2, ..., 10=0
                rts

.startGame       jsr     clearScreen
                lda     #$05
                sta     lives
                lda     #$00
                ldx     #$03
.clearScore      sta     score,x
                dex
                bpl     clearScore
                lda     #$01                            ;print "LODE RUNNER MENU"
                sta     yBlockPos
                lda     #$06
                sta     xBlockPos
                lda     #$03
                sta     textColour
                ldx     #$0f
                stx     $74
; menu is printed in columns, not in rows
.printMenuTitleString ldx $74
                lda     revEncStrLodeRunnerMenu,x
                jsr     printAlphaNum
                dec     $74
                bpl     printMenuTitleString
                lda     #$00
                sta     $74
                sta     $75                             ;$75/$74 x-pos of sprite (16-bit)
                lda     #$1b                            ;need to draw 28 sprites = 280px
                sta     $76
.drawRedBarBlock lda     $74
                sta     $70
                lda     $75
                sta     $71                             ;$71/$70 must contain x-pos for sprite plot
                ldy     #$1e                            ;y-pos of bar
                lda     #$06                            ;thick red bar under menu title
                jsr     plotSprite10x10
                lda     $74
                clc
                adc     #$0a                            ;move right by 10px
                sta     $74
                lda     $75
                adc     #$00
                sta     $75
                dec     $76
                bpl     drawRedBarBlock
                lda     #$01                            ;print 4 menu items ("1] PLAY.", "2] EDIT.", "3] LOAD.", "4] SAVE.")
                sta     xBlockPos
                lda     #$04
                sta     yBlockPos
                lda     #$02
                sta     textColour
                ldx     #$07
                stx     $74                             ;7 rows
.menuPrintNextColumn ldx $74
                lda     revEncStr1Play,x
                jsr     printAlphaNum
                inc     yBlockPos
                inc     yBlockPos
                dec     xBlockPos
                ldx     $74
                lda     revEncStr2Edit,x
                jsr     printAlphaNum
                inc     yBlockPos
                inc     yBlockPos
                dec     xBlockPos
                ldx     $74
                lda     revEncStr3Load,x
                jsr     printAlphaNum
                inc     yBlockPos
                inc     yBlockPos
                dec     xBlockPos
                ldx     $74
                lda     revEncStr4Save,x
                jsr     printAlphaNum
                lda     yBlockPos
                sbc     #$05
                sta     yBlockPos                       ;back to first row
                dec     $74
                bpl     menuPrintNextColumn
                lda     #$c8
                ldx     #$03
                jsr     OSBYTE                          ;*FX200,3
                lda     #$0d
                sta     xBlockPos
.rescanForKeys   jsr     readJoystickAndKeys
                lda     keysPressed
                and     #$10                            ;check if RETURN was pressed (or FIRE on joystick?)
                beq     checkMenuOption                 ;no, check the keys corresponding to the 4 menu options
                lda     #$01                            ;yes, start level 1 (quick play)
                sta     level
                jmp     gameLoop

.checkMenuOption jsr     scanKeys0to9
                lda     keyCodes0to9Index
                beq     rescanForKeys
                cmp     #$01                            ;menu option 1 = PLAY
                bne     checkMenuOptionEdit
                jsr     waitKeyRelease
                jsr     inputNewLevelNumber
                lda     numberInput
                sta     level
                jmp     gameLoop                        ;go play the level requested

.checkMenuOptionEdit cmp #$02                            ;menu option 2 = EDIT
                bne     checkMenuOptionLoad
                jsr     waitKeyRelease
                lda     #$06
                sta     yBlockPos
                jsr     inputNewLevelNumber
                lda     numberInput
                sta     level
                jmp     editLevel

.checkMenuOptionLoad cmp #$03                            ;menu option 3 = LOAD
                bne     checkMenuOptionSave
                jsr     loadLevels
                jmp     startGame

.checkMenuOptionSave cmp #$04                            ;menu option 4 = SAVE
                bne     rescanForKeys
                lda     #$0c
                sta     yBlockPos
                lda     #$01
                sta     xBlockPos
                lda     #$17
                sta     $74
.printRecordThenReturnString ldy $74
                lda     revEncStrPressRecordThenReturn,y
                jsr     printAlphaNum
                dec     $74
                bpl     printRecordThenReturnString
                ldx     #<strSaveLevels
                ldy     #>strSaveLevels
                jsr     OSCLI                           ;*SAVE LEVELS 2C99 4FE0
                jmp     startGame

.inputNewLevelNumber lda level
                jsr     printThreeDigitNumber           ;print current level
                lda     #$15
                sta     xBlockPos
.readNumber      lda     #$00
                sta     numberInput
.waitForDigitKey jsr     scanKeys0to9
                lda     keyCodes0to9Index
                beq     waitForDigitKey
                cmp     #$0a                            ;10=0
                bne     checkFirstDigitIsOne
                lda     #$00
                jmp     firstDigitAccepted              ;0 is acceptable as first digit of level number

.checkFirstDigitIsOne cmp #$01
                bne     waitForDigitKey                 ;1 is also acceptable as first digit of level number, others are not (rescan)
                ldy     #$64
                sty     numberInput                     ;first digit=1 so the number will be 100+xxx
.firstDigitAccepted jsr  printDigitAndWaitKeyRelease
.waitForSecondDigit jsr  scanKeys0to9
                lda     keyCodes0to9Index
                beq     waitForSecondDigit
                cmp     #$0a
                bne     processSecondDigit
                lda     #$00                            ;10=0
.processSecondDigit pha                                  ;we have read the second digit from input
                jsr     times10
                clc
                adc     numberInput
                sta     numberInput                     ;update the number
                pla
                jsr     printDigitAndWaitKeyRelease
.waitForThirdDigit jsr   scanKeys0to9
                lda     keyCodes0to9Index
                beq     waitForThirdDigit
                cmp     #$0a
                bne     processThirdDigit
                lda     #$00                            ;10=0
.processThirdDigit pha                                   ;we have read the third (last) digit from input
                clc
                adc     numberInput
                sta     numberInput                     ;update the number, so we have 100*first_digit + 10*second_digit + 1*third_digit
                pla
                jsr     printDigitAndWaitKeyRelease
                lda     numberInput
                beq     illegalLevelNumber
                cmp     #$29
                bcc     numberAccepted
.illegalLevelNumber lda  yBlockPos                       ;a level number <1 or >40 will print "ILLEGAL SCREEN. PLEASE TRY AGAIN..."
                pha
                lda     #$0d
                sta     yBlockPos
                lda     #$01
                sta     xBlockPos
                sta     textColour
                lda     #$0d
                sta     $74
.printStr        ldy     $74
                lda     revEncStrIllegalScreen,y
                jsr     printAlphaNum
                dec     $74
                bpl     printStr
                lda     #$0e
                sta     yBlockPos
                lda     #$01
                sta     xBlockPos
                lda     #$12
                sta     $74
.printStr2       ldy     $74
                lda     revEncStrPleaseTryAgain,y
                jsr     printAlphaNum
                dec     $74
                bpl     printStr2
                pla                                     ;erase the number (3 digits) that was input
                sta     yBlockPos
                lda     #$15
                sta     xBlockPos
                lda     #$02
                sta     textColour
                lda     #$1c                            ;print space
                jsr     printAlphaNum
                lda     #$1c                            ;print space
                jsr     printAlphaNum
                lda     #$1c                            ;print space
                jsr     printAlphaNum
                lda     #$15
                sta     xBlockPos
                jmp     readNumber                      ;start over until we have a legal number (001..040)

.numberAccepted  rts

.printDigitAndWaitKeyRelease clc
                adc     #$12
                jsr     printAlphaNum
.waitKeyRelease  lda     #$7a
                jsr     OSBYTE                          ;key scan (>16)
                cpx     #$ff
                bne     waitKeyRelease
                rts

.loadLevels      lda     #$0c
                sta     yBlockPos
                lda     #$01
                sta     xBlockPos
                lda     #$11
                sta     $74
.llPrintStr      ldy     $74
                lda     revEncStrPressPlayOnTape,y
                jsr     printAlphaNum
                dec     $74
                bpl     llPrintStr
                ldx     #<strLoadLevels
                ldy     #>strLoadLevels
                jmp     OSCLI                           ;*LOAD LEVELS 2C99

.revEncStrLodeRunnerMenu equb $0f                        ;U
                equb    $09                             ;N
                equb    $03                             ;E
                equb    $08                             ;M
                equb    $1c                             ;space
                equb    $0c                             ;R
                equb    $03                             ;E
                equb    $09                             ;N
                equb    $09                             ;N
                equb    $0f                             ;U
                equb    $0c                             ;R
                equb    $1c                             ;space
                equb    $03                             ;E
                equb    $02                             ;D
                equb    $0a                             ;O
                equb    $07                             ;L
.revEncStr1Play  equb    $1e                             ;.
                equb    $11                             ;Y
                equb    $00                             ;A
                equb    $07                             ;L
                equb    $0b                             ;P
                equb    $1c                             ;space
                equb    $1d                             ;]
                equb    $13                             ;1
.revEncStr2Edit  equb    $1e                             ;.
                equb    $0e                             ;T
                equb    $06                             ;I
                equb    $02                             ;D
                equb    $03                             ;E
                equb    $1c                             ;space
                equb    $1d                             ;]
                equb    $14                             ;2
.revEncStr3Load  equb    $1e                             ;.
                equb    $02                             ;D
                equb    $00                             ;A
                equb    $0a                             ;O
                equb    $07                             ;L
                equb    $1c                             ;space
                equb    $1d                             ;]
                equb    $15                             ;3
.revEncStr4Save  equb    $1e                             ;.
                equb    $03                             ;E
                equb    $10                             ;V
                equb    $00                             ;A
                equb    $0d                             ;S
                equb    $1c                             ;space
                equb    $1d                             ;]
                equb    $16                             ;4
.revEncStrPressRecordThenReturn equb $09                 ;N
                equb    $0c                             ;R
                equb    $0f                             ;U
                equb    $0e                             ;T
                equb    $03                             ;E
                equb    $0c                             ;R
                equb    $1c                             ;space
                equb    $09                             ;N
                equb    $03                             ;E
                equb    $05                             ;H
                equb    $0e                             ;T
                equb    $1c                             ;space
                equb    $02                             ;D
                equb    $0c                             ;R
                equb    $0a                             ;O
                equb    $01                             ;C
                equb    $03                             ;E
                equb    $0c                             ;R
                equb    $1c                             ;space
                equb    $0d                             ;S
                equb    $0d                             ;S
                equb    $03                             ;E
                equb    $0c                             ;R
                equb    $0b                             ;P
.revEncStrPressPlayOnTape equb $03                       ;E
                equb    $0b                             ;P
                equb    $00                             ;A
                equb    $0e                             ;T
                equb    $1c                             ;space
                equb    $09                             ;N
                equb    $0a                             ;O
                equb    $1c                             ;space
                equb    $11                             ;Y
                equb    $00                             ;A
                equb    $07                             ;L
                equb    $0b                             ;P
                equb    $1c                             ;space
                equb    $0d                             ;S
                equb    $0d                             ;S
                equb    $03                             ;E
                equb    $0c                             ;R
                equb    $0b                             ;P
.revEncStrIllegalScreen equb $09                         ;N
                equb    $03                             ;E
                equb    $03                             ;E
                equb    $0c                             ;R
                equb    $01                             ;C
                equb    $0d                             ;S
                equb    $1c                             ;space
                equb    $07                             ;L
                equb    $00                             ;A
                equb    $04                             ;G
                equb    $03                             ;E
                equb    $07                             ;L
                equb    $07                             ;L
                equb    $06                             ;I
.revEncStrPleaseTryAgain equb $1e                        ;.
                equb    $1e                             ;.
                equb    $1e                             ;.
                equb    $09                             ;N
                equb    $06                             ;I
                equb    $00                             ;A
                equb    $04                             ;G
                equb    $00                             ;A
                equb    $1c                             ;space
                equb    $11                             ;Y
                equb    $0c                             ;R
                equb    $0e                             ;T
                equb    $1c                             ;space
                equb    $03                             ;E
                equb    $0d                             ;S
                equb    $00                             ;A
                equb    $03                             ;E
                equb    $07                             ;L
                equb    $0b                             ;P
.keyCodes0to9    equb    $b0                             ;1
                equb    $b1                             ;2
                equb    $91                             ;3
                equb    $92                             ;4
                equb    $93                             ;5
                equb    $b4                             ;6
                equb    $a4                             ;7
                equb    $95                             ;8
                equb    $a6                             ;9
                equb    $a7                             ;0
.levelNibbleToTile equb  $00                             ;empty tile
                equb    $01                             ;brick
                equb    $02                             ;solid block
                equb    $03                             ;ladder
                equb    $04                             ;tile
                equb    $31                             ;trapdoor
                equb    $32                             ;escape ladder
                equb    $05                             ;gold ingot
                equb    $23                             ;enemy
                equb    $07                             ;player
                equb    $00                             ;undefined, default to empty tile
                equb    $00                             ;undefined, default to empty tile
                equb    $00                             ;undefined, default to empty tile
                equb    $00                             ;undefined, default to empty tile
                equb    $00                             ;undefined, default to empty tile
                equb    $00                             ;undefined, default to empty tile
.keyCodes0to9Index equb  $00
.levelEditInProgress equb $00
.numberInput     equb    $00
; Level data: 40 levels, 224 bytes per level, total of 40*224=8960 bytes = &2300
.levelData       equd    $00000000
                equd    $00000000
                equd    $00006000
                equd    $00000000
                equd    $00000070
                equd    $60000000
                equd    $00000000
                equd    $13121212
                equd    $10111111
                equd    $00006000
                equd    $00000000
                equd    $44440300
                equd    $60444444
                equd    $00000000
                equd    $03000000
                equd    $30110000
                equd    $11111100
                equd    $00001113
                equd    $00000300
                equd    $00003011
                equd    $00030000
                equd    $03080000
                equd    $30110000
                equd    $78000000
                equd    $31110003
                equd    $00001111
                equd    $11111111
                equd    $11111131
                equd    $00003000
                equd    $00000000
                equd    $00300000
                equd    $30000000
                equd    $00000000
                equd    $00008000
                equd    $00000030
                equd    $11111111
                equd    $11111113
                equd    $00301111
                equd    $00000000
                equd    $00030000
                equd    $00000000
                equd    $00000030
                equd    $07000000
                equd    $44444403
                equd    $00304444
                equd    $00000070
                equd    $10111131
                equd    $00000000
                equd    $13111111
                equd    $00300000
                equd    $90000000
                equd    $00000000
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000700
                equd    $00000000
                equd    $00000000
                equd    $21320300
                equd    $00003022
                equd    $00070000
                equd    $03000000
                equd    $30000030
                equd    $11110300
                equd    $70301111
                equd    $70300300
                equd    $03003080
                equd    $00000000
                equd    $53111131
                equd    $30212131
                equd    $00000300
                equd    $00300000
                equd    $00300600
                equd    $43443400
                equd    $08444444
                equd    $06000030
                equd    $30000030
                equd    $00000300
                equd    $22221103
                equd    $00302322
                equd    $03003000
                equd    $00037000
                equd    $03000000
                equd    $30800030
                equd    $11110370
                equd    $00000013
                equd    $11210300
                equd    $23111221
                equd    $00000000
                equd    $11131103
                equd    $00201121
                equd    $00000300
                equd    $00030000
                equd    $00270003
                equd    $03000020
                equd    $44440400
                equd    $07030043
                equd    $11111111
                equd    $22221131
                equd    $00030000
                equd    $00001111
                equd    $00300000
                equd    $00000000
                equd    $00000003
                equd    $00000000
                equd    $00900030
                equd    $00030000
                equd    $11110000
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $44440600
                equd    $00444444
                equd    $00007000
                equd    $06000000
                equd    $00007030
                equd    $11111103
                equd    $00301111
                equd    $11110600
                equd    $00030013
                equd    $00000000
                equd    $22222232
                equd    $08030000
                equd    $07000003
                equd    $00300000
                equd    $00000000
                equd    $11111103
                equd    $31111131
                equd    $00000010
                equd    $00037000
                equd    $00300000
                equd    $40043000
                equd    $11110000
                equd    $00000031
                equd    $30000830
                equd    $00400400
                equd    $00300000
                equd    $11111103
                equd    $00001031
                equd    $00004704
                equd    $00434434
                equd    $08300000
                equd    $01000000
                equd    $00300000
                equd    $11310000
                equd    $30111111
                equd    $00000000
                equd    $00000030
                equd    $11111131
                equd    $00003011
                equd    $11111311
                equd    $00111111
                equd    $11010007
                equd    $13113111
                equd    $11111111
                equd    $13110311
                equd    $31111101
                equd    $00000300
                equd    $03009000
                equd    $07001311
                equd    $11113000
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $44640000
                equd    $44444444
                equd    $00000000
                equd    $00000000
                equd    $30000030
                equd    $70100000
                equd    $30000010
                equd    $70300000
                equd    $70003303
                equd    $70101111
                equd    $70003303
                equd    $30003330
                equd    $00003003
                equd    $30003300
                equd    $30303003
                equd    $30303333
                equd    $30000000
                equd    $30303333
                equd    $87073030
                equd    $30003000
                equd    $87073000
                equd    $03303000
                equd    $70131111
                equd    $73003303
                equd    $00131111
                equd    $33330030
                equd    $30003330
                equd    $33333003
                equd    $00300030
                equd    $30000000
                equd    $30303333
                equd    $00000000
                equd    $00070030
                equd    $87073000
                equd    $00003000
                equd    $11310070
                equd    $03001311
                equd    $00131111
                equd    $11111131
                equd    $03000030
                equd    $33330000
                equd    $00300030
                equd    $00300000
                equd    $00000300
                equd    $00000000
                equd    $00000030
                equd    $03000030
                equd    $07000000
                equd    $00309000
                equd    $11110000
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $00000006
                equd    $00000000
                equd    $00000000
                equd    $00060000
                equd    $00070000
                equd    $00800000
                equd    $00001011
                equd    $00000006
                equd    $11311111
                equd    $11001111
                equd    $00060000
                equd    $00100100
                equd    $00000030
                equd    $00100100
                equd    $11000006
                equd    $00300000
                equd    $01780000
                equd    $00060011
                equd    $00001171
                equd    $00700030
                equd    $10113111
                equd    $11110006
                equd    $11311131
                equd    $30001111
                equd    $01061100
                equd    $00300010
                equd    $00000000
                equd    $01803700
                equd    $00001113
                equd    $70000030
                equd    $11310000
                equd    $00030030
                equd    $13310100
                equd    $00001011
                equd    $00300030
                equd    $00000000
                equd    $00000300
                equd    $00300000
                equd    $00070030
                equd    $03000800
                equd    $00000000
                equd    $11310030
                equd    $11311111
                equd    $11111311
                equd    $00301113
                equd    $00000000
                equd    $00000030
                equd    $00030000
                equd    $00000030
                equd    $09300000
                equd    $00000000
                equd    $11110003
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $22222222
                equd    $22222222
                equd    $22116111
                equd    $70101121
                equd    $00000000
                equd    $61000000
                equd    $01000708
                equd    $11131115
                equd    $70003011
                equd    $11116100
                equd    $11153111
                equd    $11111113
                equd    $11111111
                equd    $31001101
                equd    $00030010
                equd    $00008070
                equd    $11011111
                equd    $11133100
                equd    $13111111
                equd    $11111111
                equd    $31001101
                equd    $11010013
                equd    $11111311
                equd    $11017117
                equd    $00133170
                equd    $13111101
                equd    $11111111
                equd    $31111111
                equd    $00010013
                equd    $00007300
                equd    $07000870
                equd    $00133101
                equd    $11311101
                equd    $11311111
                equd    $31311111
                equd    $11710013
                equd    $00000030
                equd    $11111131
                equd    $11133131
                equd    $00300051
                equd    $01300009
                equd    $31310010
                equd    $31511113
                equd    $11311111
                equd    $70171111
                equd    $11133131
                equd    $11113151
                equd    $17111131
                equd    $31111111
                equd    $31008013
                equd    $00301117
                equd    $00800007
                equd    $11113100
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00006000
                equd    $00000000
                equd    $00000000
                equd    $60000000
                equd    $00000000
                equd    $00000000
                equd    $44444444
                equd    $00006000
                equd    $00080000
                equd    $00300000
                equd    $11110300
                equd    $01001013
                equd    $08001131
                equd    $03070030
                equd    $00030000
                equd    $00300000
                equd    $11311101
                equd    $80001111
                equd    $00070003
                equd    $00000030
                equd    $00000030
                equd    $11131111
                equd    $00300011
                equd    $00300000
                equd    $00000000
                equd    $00000003
                equd    $00000030
                equd    $00000030
                equd    $00037000
                equd    $00300007
                equd    $00300000
                equd    $31110000
                equd    $11111111
                equd    $00001311
                equd    $03111130
                equd    $00003000
                equd    $03000000
                equd    $11300007
                equd    $30000311
                equd    $00000007
                equd    $44440300
                equd    $03711030
                equd    $13111111
                equd    $00000000
                equd    $11300000
                equd    $00001311
                equd    $00000300
                equd    $00000000
                equd    $03000030
                equd    $03000000
                equd    $00000009
                equd    $08307000
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $00000600
                equd    $00000060
                equd    $00000000
                equd    $06000000
                equd    $00600000
                equd    $00000000
                equd    $00000700
                equd    $00001603
                equd    $80003061
                equd    $11310070
                equd    $16433411
                equd    $34610000
                equd    $13111143
                equd    $30010031
                equd    $00001600
                equd    $10030061
                equd    $00311300
                equd    $16003001
                equd    $00610000
                equd    $13001003
                equd    $30010731
                equd    $00001600
                equd    $10030061
                equd    $11311370
                equd    $16003011
                equd    $00610000
                equd    $13111103
                equd    $30010031
                equd    $00001600
                equd    $10030061
                equd    $00311300
                equd    $13443401
                equd    $44311111
                equd    $13001043
                equd    $00010031
                equd    $00001303
                equd    $10003031
                equd    $87311300
                equd    $13030001
                equd    $30317800
                equd    $13781000
                equd    $00111531
                equd    $22221203
                equd    $11003021
                equd    $00301351
                equd    $00035000
                equd    $30000000
                equd    $03000005
                equd    $05000030
                equd    $90000083
                equd    $00503000
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $44640000
                equd    $44444444
                equd    $44444444
                equd    $44444444
                equd    $01000031
                equd    $00000000
                equd    $00010000
                equd    $11300100
                equd    $00001011
                equd    $00000000
                equd    $10111100
                equd    $10111030
                equd    $00000000
                equd    $17000000
                equd    $11301011
                equd    $80801011
                equd    $00000008
                equd    $10111100
                equd    $15101130
                equd    $11111111
                equd    $11111111
                equd    $11301010
                equd    $10111511
                equd    $11711071
                equd    $10131111
                equd    $15111130
                equd    $11111111
                equd    $11111111
                equd    $11301013
                equd    $11111511
                equd    $11111111
                equd    $10131111
                equd    $15111130
                equd    $00001111
                equd    $11111111
                equd    $11301013
                equd    $11111511
                equd    $11110000
                equd    $10131111
                equd    $15111130
                equd    $07001111
                equd    $11111131
                equd    $00301013
                equd    $00000000
                equd    $44341111
                equd    $00434444
                equd    $00000030
                equd    $20220200
                equd    $00000000
                equd    $00300000
                equd    $22000900
                equd    $00000022
                equd    $00000080
                equd    $00000000
                equd    $00007000
                equd    $00000000
                equd    $00000006
                equd    $11310000
                equd    $70001111
                equd    $00060000
                equd    $00700000
                equd    $01000030
                equd    $00001111
                equd    $11110006
                equd    $30111111
                equd    $00000000
                equd    $00060070
                equd    $00000000
                equd    $11113100
                equd    $13111116
                equd    $00800011
                equd    $30000000
                equd    $00060000
                equd    $00000300
                equd    $11111111
                equd    $00003011
                equd    $03000806
                equd    $11110700
                equd    $31111111
                equd    $22111111
                equd    $11110300
                equd    $11111111
                equd    $00003011
                equd    $03000000
                equd    $11110000
                equd    $30111111
                equd    $70000000
                equd    $00004344
                equd    $00000011
                equd    $00003011
                equd    $03001100
                equd    $00110000
                equd    $30110077
                equd    $00700000
                equd    $00000300
                equd    $11111111
                equd    $11111311
                equd    $03001311
                equd    $00000000
                equd    $03000000
                equd    $01000000
                equd    $13111111
                equd    $00700000
                equd    $00000309
                equd    $00000000
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $03000000
                equd    $00000000
                equd    $00000000
                equd    $70080000
                equd    $00000300
                equd    $00000000
                equd    $80070000
                equd    $03701831
                equd    $00000000
                equd    $07000000
                equd    $01301381
                equd    $11110310
                equd    $13111163
                equd    $03100100
                equd    $00000030
                equd    $70330000
                equd    $00000300
                equd    $00300300
                equd    $00000000
                equd    $03003073
                equd    $03000000
                equd    $00000030
                equd    $70330000
                equd    $00000000
                equd    $00300300
                equd    $00000000
                equd    $00003073
                equd    $03000000
                equd    $00000030
                equd    $70330000
                equd    $00000000
                equd    $00300300
                equd    $00000000
                equd    $00003073
                equd    $03000000
                equd    $00000030
                equd    $70330000
                equd    $00000000
                equd    $00300300
                equd    $00000000
                equd    $00003073
                equd    $03000000
                equd    $00000030
                equd    $70330000
                equd    $00000000
                equd    $00300300
                equd    $00000000
                equd    $00003073
                equd    $03000000
                equd    $00000030
                equd    $70330090
                equd    $00000000
                equd    $00300300
                equd    $11111103
                equd    $11111111
                equd    $03003011
                equd    $70000000
                equd    $00700000
                equd    $00000000
                equd    $11310030
                equd    $11111111
                equd    $30111111
                equd    $00300000
                equd    $00000030
                equd    $70000000
                equd    $00003000
                equd    $11110730
                equd    $11131111
                equd    $10111111
                equd    $11310000
                equd    $11111111
                equd    $00000033
                equd    $00000000
                equd    $11110030
                equd    $44341311
                equd    $00304444
                equd    $00300000
                equd    $33110717
                equd    $80000000
                equd    $80000730
                equd    $11110730
                equd    $00003013
                equd    $22121131
                equd    $11311111
                equd    $00030000
                equd    $00300000
                equd    $00000000
                equd    $00000030
                equd    $00000003
                equd    $00000030
                equd    $00300000
                equd    $00830000
                equd    $44340007
                equd    $44444444
                equd    $11310730
                equd    $11111111
                equd    $00000730
                equd    $11310007
                equd    $00000030
                equd    $11300000
                equd    $10111111
                equd    $00300030
                equd    $00000000
                equd    $00000030
                equd    $00300000
                equd    $07000030
                equd    $00300000
                equd    $00000709
                equd    $11110030
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $00800000
                equd    $08000000
                equd    $53530600
                equd    $53535353
                equd    $53535353
                equd    $56535353
                equd    $53535353
                equd    $53535353
                equd    $53535353
                equd    $13735653
                equd    $13731303
                equd    $13731303
                equd    $16731303
                equd    $13531353
                equd    $13531353
                equd    $13531353
                equd    $13531653
                equd    $13531353
                equd    $13531353
                equd    $16531353
                equd    $13531353
                equd    $13531353
                equd    $13531353
                equd    $13031653
                equd    $13031373
                equd    $13031373
                equd    $16031373
                equd    $13531353
                equd    $13531353
                equd    $13531353
                equd    $13531653
                equd    $13531353
                equd    $13531353
                equd    $16531353
                equd    $03030373
                equd    $03030303
                equd    $03030303
                equd    $11311603
                equd    $11111111
                equd    $11111111
                equd    $16111111
                equd    $00000030
                equd    $70807000
                equd    $00807000
                equd    $22320600
                equd    $22222222
                equd    $22222222
                equd    $26222222
                equd    $00000037
                equd    $00000009
                equd    $00000000
                equd    $11117600
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $80003000
                equd    $08000400
                equd    $34000043
                equd    $30040700
                equd    $00404300
                equd    $40030440
                equd    $03403000
                equd    $03043040
                equd    $40000004
                equd    $30000403
                equd    $30700304
                equd    $40000340
                equd    $00030004
                equd    $43003047
                equd    $43003400
                equd    $00400400
                equd    $30047003
                equd    $00340300
                equd    $04400304
                equd    $44030440
                equd    $00044444
                equd    $43004030
                equd    $00044700
                equd    $00400003
                equd    $04344030
                equd    $43740300
                equd    $00034000
                equd    $04300400
                equd    $03404030
                equd    $04000344
                equd    $40000003
                equd    $07340430
                equd    $03408304
                equd    $40430004
                equd    $04300004
                equd    $40004330
                equd    $04000300
                equd    $00000400
                equd    $03340430
                equd    $03000400
                equd    $00404000
                equd    $04300040
                equd    $00044330
                equd    $00740340
                equd    $00040004
                equd    $03347430
                equd    $03040400
                equd    $40074040
                equd    $40304000
                equd    $40004330
                equd    $00004300
                equd    $04040404
                equd    $03000034
                equd    $00070000
                equd    $00000790
                equd    $00300000
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600600
                equd    $07807000
                equd    $00070000
                equd    $06007080
                equd    $11116666
                equd    $00301111
                equd    $11111131
                equd    $00006616
                equd    $00000000
                equd    $00300030
                equd    $00000000
                equd    $03000000
                equd    $11111111
                equd    $00131111
                equd    $08700000
                equd    $00007300
                equd    $00000707
                equd    $07807003
                equd    $13111111
                equd    $11110707
                equd    $11030717
                equd    $00001111
                equd    $11010300
                equd    $11110010
                equd    $00000003
                equd    $03700000
                equd    $70000000
                equd    $07030000
                equd    $31000000
                equd    $11111111
                equd    $11111111
                equd    $00131111
                equd    $00003000
                equd    $90000000
                equd    $00000000
                equd    $30000003
                equd    $31070070
                equd    $37111111
                equd    $00030700
                equd    $11111111
                equd    $00003011
                equd    $11113100
                equd    $00001111
                equd    $30000000
                equd    $30000000
                equd    $00000000
                equd    $00007000
                equd    $00003000
                equd    $00003000
                equd    $12120007
                equd    $12121212
                equd    $12121212
                equd    $12121212
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000006
                equd    $00000000
                equd    $00000000
                equd    $60000090
                equd    $11110500
                equd    $11111133
                equd    $00303333
                equd    $00000600
                equd    $00030000
                equd    $00300001
                equd    $60000000
                equd    $00700000
                equd    $00313000
                equd    $00000030
                equd    $00000006
                equd    $03000017
                equd    $00300031
                equd    $00600000
                equd    $70110100
                equd    $00310000
                equd    $06000030
                equd    $11000000
                equd    $00001711
                equd    $00300031
                equd    $00006000
                equd    $11111111
                equd    $00310000
                equd    $06000030
                equd    $11070000
                equd    $00001011
                equd    $00300031
                equd    $00600000
                equd    $00110100
                equd    $00310000
                equd    $00000030
                equd    $00000006
                equd    $00000010
                equd    $00300031
                equd    $60000000
                equd    $08000000
                equd    $00310000
                equd    $00800030
                equd    $11030600
                equd    $11111111
                equd    $11511111
                equd    $06111111
                equd    $11111101
                equd    $11111111
                equd    $00000000
                equd    $11111603
                equd    $11111111
                equd    $07001111
                equd    $11737777
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600600
                equd    $00000000
                equd    $00000000
                equd    $06000000
                equd    $00000060
                equd    $00008000
                equd    $00000000
                equd    $11310600
                equd    $11111151
                equd    $11111111
                equd    $13111111
                equd    $11511131
                equd    $11111111
                equd    $11111111
                equd    $00301311
                equd    $44110070
                equd    $11444444
                equd    $03000000
                equd    $00000030
                equd    $08003071
                equd    $00001107
                equd    $01300380
                equd    $30110011
                equd    $11111111
                equd    $13111100
                equd    $00710130
                equd    $00003011
                equd    $11001100
                equd    $00301371
                equd    $30110090
                equd    $11000000
                equd    $13111100
                equd    $00110130
                equd    $11111111
                equd    $11001133
                equd    $01301371
                equd    $11110011
                equd    $11331111
                equd    $13111100
                equd    $00110130
                equd    $00000011
                equd    $00001130
                equd    $01300300
                equd    $00110011
                equd    $11300700
                equd    $03700000
                equd    $11111111
                equd    $11113111
                equd    $11311111
                equd    $11111111
                equd    $31071011
                equd    $70101111
                equd    $11111131
                equd    $00000600
                equd    $00000000
                equd    $00000000
                equd    $06000000
                equd    $70000000
                equd    $00000000
                equd    $07000070
                equd    $00001335
                equd    $00301131
                equd    $31113100
                equd    $01301300
                equd    $00101111
                equd    $30111131
                equd    $03073000
                equd    $00000837
                equd    $00300000
                equd    $11003000
                equd    $11350311
                equd    $00000011
                equd    $31110100
                equd    $03000000
                equd    $10112130
                equd    $11000000
                equd    $00000000
                equd    $21300331
                equd    $00001111
                equd    $00001001
                equd    $03303100
                equd    $11112130
                equd    $00111111
                equd    $30007000
                equd    $21301100
                equd    $11111111
                equd    $11010011
                equd    $00003000
                equd    $01002030
                equd    $00110111
                equd    $30000000
                equd    $20308700
                equd    $70100107
                equd    $80000011
                equd    $11003000
                equd    $11112330
                equd    $13111111
                equd    $30111111
                equd    $03301100
                equd    $00000000
                equd    $00000300
                equd    $11003000
                equd    $00000330
                equd    $00000900
                equd    $30000000
                equd    $11111100
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $13310000
                equd    $00000000
                equd    $00000000
                equd    $87000000
                equd    $00781331
                equd    $00000000
                equd    $00000000
                equd    $11113100
                equd    $00000013
                equd    $00000000
                equd    $31070000
                equd    $70131111
                equd    $00000000
                equd    $00000000
                equd    $11111131
                equd    $00001311
                equd    $00000000
                equd    $11318700
                equd    $13111111
                equd    $00000078
                equd    $31000000
                equd    $11111111
                equd    $00131111
                equd    $00000000
                equd    $77003007
                equd    $00777777
                equd    $00007003
                equd    $11310000
                equd    $11111111
                equd    $13111111
                equd    $07000000
                equd    $11111131
                equd    $11111111
                equd    $00701311
                equd    $11113100
                equd    $11111111
                equd    $11111111
                equd    $31000013
                equd    $11111111
                equd    $11111111
                equd    $00131111
                equd    $00003000
                equd    $00000000
                equd    $00000000
                equd    $30000003
                equd    $00000000
                equd    $00000000
                equd    $00030000
                equd    $00003000
                equd    $00090000
                equd    $00000000
                equd    $11110003
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $70080000
                equd    $00000000
                equd    $00000000
                equd    $01000000
                equd    $13111111
                equd    $00070800
                equd    $08000000
                equd    $00000007
                equd    $11130300
                equd    $00001311
                equd    $13111107
                equd    $03000000
                equd    $03000003
                equd    $10111511
                equd    $44440300
                equd    $70034344
                equd    $00000300
                equd    $03000000
                equd    $03000000
                equd    $11111101
                equd    $00000007
                equd    $00000300
                equd    $00000300
                equd    $13110000
                equd    $13111111
                equd    $03000000
                equd    $44444444
                equd    $08000370
                equd    $00000300
                equd    $00000370
                equd    $11110700
                equd    $01101111
                equd    $13111111
                equd    $11110000
                equd    $07000000
                equd    $00000700
                equd    $00000300
                equd    $11110000
                equd    $11151113
                equd    $03700013
                equd    $00000700
                equd    $00030000
                equd    $11010000
                equd    $11111111
                equd    $00001311
                equd    $00000003
                equd    $00000000
                equd    $03000000
                equd    $07030000
                equd    $00000900
                equd    $00007000
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $22222222
                equd    $22222222
                equd    $22222222
                equd    $44346122
                equd    $44444444
                equd    $44444444
                equd    $61664344
                equd    $00000330
                equd    $00081001
                equd    $03000007
                equd    $03300167
                equd    $11111101
                equd    $11111111
                equd    $31111111
                equd    $11010330
                equd    $00000000
                equd    $00700000
                equd    $03303100
                equd    $11010100
                equd    $11111111
                equd    $11111111
                equd    $31000330
                equd    $10000700
                equd    $10701070
                equd    $03300170
                equd    $11133100
                equd    $11111111
                equd    $11111111
                equd    $30440330
                equd    $10111103
                equd    $00101111
                equd    $03300100
                equd    $00033000
                equd    $00711000
                equd    $01000800
                equd    $30000330
                equd    $11304403
                equd    $11413411
                equd    $03301111
                equd    $00033000
                equd    $30000030
                equd    $11111101
                equd    $30000330
                equd    $43340003
                equd    $11013000
                equd    $03301111
                equd    $00033000
                equd    $31010330
                equd    $01770711
                equd    $30900330
                equd    $03300803
                equd    $31113100
                equd    $11111111
                equd    $11111111
                equd    $30111111
                equd    $11113177
                equd    $00000000
                equd    $00000700
                equd    $00000000
                equd    $11770000
                equd    $11111111
                equd    $00131111
                equd    $00000000
                equd    $00000011
                equd    $70000700
                equd    $00000003
                equd    $00000000
                equd    $11030000
                equd    $00131111
                equd    $00070007
                equd    $00000000
                equd    $00000003
                equd    $11111103
                equd    $00001011
                equd    $00038770
                equd    $00000000
                equd    $00000000
                equd    $11110300
                equd    $44443411
                equd    $70000000
                equd    $03000000
                equd    $30000000
                equd    $11310000
                equd    $13111111
                equd    $00000300
                equd    $00003000
                equd    $00000030
                equd    $13110300
                equd    $30800000
                equd    $00307080
                equd    $03070000
                equd    $31000000
                equd    $11113111
                equd    $31000030
                equd    $00001111
                equd    $44443400
                equd    $07004044
                equd    $00003000
                equd    $37700000
                equd    $03000000
                equd    $30111111
                equd    $11117000
                equd    $00001311
                equd    $00000300
                equd    $11113100
                equd    $03000000
                equd    $03000000
                equd    $00000000
                equd    $00000000
                equd    $70000300
                equd    $00000309
                equd    $00007000
                equd    $22220200
                equd    $00002222
                equd    $06000000
                equd    $20000000
                equd    $00000000
                equd    $00000020
                equd    $20020600
                equd    $70070002
                equd    $30010080
                equd    $06000000
                equd    $11222002
                equd    $11111131
                equd    $08002312
                equd    $20720600
                equd    $11311121
                equd    $11111111
                equd    $13221231
                equd    $13212222
                equd    $44441433
                equd    $14331344
                equd    $43444344
                equd    $10031321
                equd    $13000007
                equd    $00701003
                equd    $13210307
                equd    $00091003
                equd    $10031300
                equd    $03000000
                equd    $11731321
                equd    $13113111
                equd    $00001273
                equd    $11212300
                equd    $31111111
                equd    $11111111
                equd    $13111111
                equd    $01000020
                equd    $00113313
                equd    $00070070
                equd    $44240307
                equd    $03334144
                equd    $44444434
                equd    $43444444
                equd    $01007020
                equd    $00300030
                equd    $00000000
                equd    $00200308
                equd    $00300000
                equd    $11110130
                equd    $03111111
                equd    $00002222
                equd    $11300030
                equd    $07107110
                equd    $11211301
                equd    $07371211
                equd    $11110130
                equd    $11111111
                equd    $00000000
                equd    $00000000
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600600
                equd    $00000000
                equd    $00000000
                equd    $66000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00006006
                equd    $00000000
                equd    $00000000
                equd    $00660000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00133100
                equd    $00000000
                equd    $00000000
                equd    $31000000
                equd    $00007013
                equd    $00000000
                equd    $03000000
                equd    $13111111
                equd    $00008000
                equd    $30010000
                equd    $70100380
                equd    $31011370
                equd    $00000030
                equd    $11311100
                equd    $11111111
                equd    $30113111
                equd    $01000000
                equd    $11017000
                equd    $37007010
                equd    $00301100
                equd    $11110000
                equd    $11010730
                equd    $01133130
                equd    $00000030
                equd    $11317101
                equd    $37307030
                equd    $00307113
                equd    $11008000
                equd    $11111111
                equd    $11111111
                equd    $22229030
                equd    $22222222
                equd    $22222222
                equd    $22222222
                equd    $00200000
                equd    $00002000
                equd    $00000020
                equd    $00006200
                equd    $20000020
                equd    $00200000
                equd    $62000070
                equd    $11210000
                equd    $00002011
                equd    $01101121
                equd    $10116211
                equd    $00000000
                equd    $07801311
                equd    $62070000
                equd    $11111111
                equd    $03001311
                equd    $11111111
                equd    $00003201
                equd    $03000900
                equd    $00101301
                equd    $32010070
                equd    $11111113
                equd    $13071311
                equd    $13111110
                equd    $44143201
                equd    $13414444
                equd    $10101301
                equd    $32010300
                equd    $10000110
                equd    $03001371
                equd    $13111030
                equd    $01103201
                equd    $33011000
                equd    $17301111
                equd    $32011311
                equd    $10070110
                equd    $00003101
                equd    $13111000
                equd    $01103200
                equd    $31011011
                equd    $10101101
                equd    $32130300
                equd    $11001113
                equd    $71013133
                equd    $11111110
                equd    $00130213
                equd    $11332102
                equd    $11000100
                equd    $12030070
                equd    $00020013
                equd    $11511103
                equd    $11111115
                equd    $11131213
                equd    $00030010
                equd    $00000800
                equd    $02030000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00006000
                equd    $00000008
                equd    $00000000
                equd    $60000000
                equd    $11111131
                equd    $80001311
                equd    $07000007
                equd    $00306000
                equd    $03000000
                equd    $00131111
                equd    $11311101
                equd    $00007030
                equd    $00000307
                equd    $00000023
                equd    $10300030
                equd    $03011101
                equd    $00237007
                equd    $00308000
                equd    $10111030
                equd    $20020301
                equd    $11111121
                equd    $10302211
                equd    $03011101
                equd    $00002002
                equd    $27000000
                equd    $10111030
                equd    $44020301
                equd    $00404444
                equd    $17302300
                equd    $03011101
                equd    $00007002
                equd    $23131101
                equd    $10111130
                equd    $20020301
                equd    $00000000
                equd    $11300303
                equd    $03111111
                equd    $00002002
                equd    $11030000
                equd    $00000030
                equd    $20020300
                equd    $00111111
                equd    $22320003
                equd    $22212222
                equd    $00002022
                equd    $00030000
                equd    $00000030
                equd    $90000000
                equd    $00000000
                equd    $11110003
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600600
                equd    $00000900
                equd    $00000000
                equd    $06000080
                equd    $31210060
                equd    $44444424
                equd    $12134244
                equd    $00600600
                equd    $70203027
                equd    $02070000
                equd    $06000203
                equd    $30102160
                equd    $00002011
                equd    $71031102
                equd    $27660612
                equd    $20073000
                equd    $07720070
                equd    $66720103
                equd    $30101126
                equd    $02201100
                equd    $01131111
                equd    $00206201
                equd    $00003000
                equd    $00707220
                equd    $72000103
                equd    $31000020
                equd    $12231111
                equd    $01730011
                equd    $70201210
                equd    $80003080
                equd    $01000003
                equd    $02000013
                equd    $30111123
                equd    $11132100
                equd    $00030012
                equd    $20033201
                equd    $10003070
                equd    $00010703
                equd    $30020003
                equd    $30102103
                equd    $00031011
                equd    $01031101
                equd    $07033012
                equd    $00203020
                equd    $72000003
                equd    $30700203
                equd    $11010003
                equd    $00030000
                equd    $10110000
                equd    $11113000
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000000
                equd    $00060000
                equd    $00000000
                equd    $44440000
                equd    $40444444
                equd    $00000006
                equd    $00000000
                equd    $07007000
                equd    $07063002
                equd    $00000000
                equd    $11110000
                equd    $22121111
                equd    $07302222
                equd    $00003032
                equd    $12121212
                equd    $02002222
                equd    $30222222
                equd    $00000000
                equd    $22000000
                equd    $00007000
                equd    $00873002
                equd    $44444444
                equd    $11112230
                equd    $21020030
                equd    $00001311
                equd    $22300000
                equd    $00380000
                equd    $13110100
                equd    $00000000
                equd    $11012230
                equd    $01131111
                equd    $00071311
                equd    $22307000
                equd    $00000001
                equd    $13110113
                equd    $10001811
                equd    $00012230
                equd    $01130007
                equd    $11111317
                equd    $22301011
                equd    $11111101
                equd    $13100113
                equd    $00000000
                equd    $00010030
                equd    $00130070
                equd    $11111300
                equd    $11111111
                equd    $30110311
                equd    $13111111
                equd    $00000000
                equd    $03009000
                equd    $00003007
                equd    $11110300
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $04448000
                equd    $00000000
                equd    $00080000
                equd    $11110000
                equd    $40003000
                equd    $00000000
                equd    $00003011
                equd    $30001111
                equd    $00000411
                equd    $30110400
                equd    $71170000
                equd    $40113000
                equd    $10111111
                equd    $00003004
                equd    $30001111
                equd    $11110000
                equd    $31301011
                equd    $00000011
                equd    $00443400
                equd    $10111111
                equd    $00710130
                equd    $00400000
                equd    $11113000
                equd    $01301011
                equd    $00000011
                equd    $30101101
                equd    $10717711
                equd    $00000030
                equd    $11010400
                equd    $11113010
                equd    $00301011
                equd    $14110000
                equd    $34107701
                equd    $04040000
                equd    $00000030
                equd    $11011017
                equd    $00403010
                equd    $11013040
                equd    $10110010
                equd    $30000000
                equd    $30009000
                equd    $00101101
                equd    $00000000
                equd    $11013000
                equd    $77013000
                equd    $01000010
                equd    $30000010
                equd    $30007101
                equd    $00101101
                equd    $00100100
                equd    $51013000
                equd    $00003000
                equd    $00000000
                equd    $30000000
                equd    $30000000
                equd    $00000000
                equd    $00000020
                equd    $00000000
                equd    $00000000
                equd    $00200600
                equd    $80777700
                equd    $00000080
                equd    $06000009
                equd    $11111121
                equd    $11115111
                equd    $11111111
                equd    $00001311
                equd    $00000000
                equd    $00000000
                equd    $03000000
                equd    $70200000
                equd    $00000007
                equd    $00000007
                equd    $00000372
                equd    $11111121
                equd    $11111151
                equd    $03121151
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000300
                equd    $00072000
                equd    $00007000
                equd    $03000270
                equd    $21000000
                equd    $11115111
                equd    $12111115
                equd    $00000300
                equd    $00000000
                equd    $00000000
                equd    $03000000
                equd    $02000000
                equd    $00007000
                equd    $20070070
                equd    $00000300
                equd    $11112200
                equd    $51111111
                equd    $03002011
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000300
                equd    $00000000
                equd    $00000000
                equd    $03000000
                equd    $08007777
                equd    $00000000
                equd    $00008000
                equd    $11110300
                equd    $22111111
                equd    $11112222
                equd    $22221211
                equd    $00000000
                equd    $00060000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000006
                equd    $00000000
                equd    $00000070
                equd    $60060000
                equd    $00000000
                equd    $03130700
                equd    $44444444
                equd    $44446444
                equd    $31304444
                equd    $00083311
                equd    $00000000
                equd    $70000000
                equd    $13111133
                equd    $44444403
                equd    $44444404
                equd    $11313044
                equd    $07331111
                equd    $00000000
                equd    $33000000
                equd    $11111111
                equd    $44440353
                equd    $44440444
                equd    $11113538
                equd    $33511111
                equd    $00000000
                equd    $15337000
                equd    $11111111
                equd    $44031351
                equd    $30444440
                equd    $11111531
                equd    $11511111
                equd    $00000733
                equd    $15113300
                equd    $11111111
                equd    $03131151
                equd    $31300444
                equd    $11111511
                equd    $11511111
                equd    $00003311
                equd    $15111133
                equd    $11111111
                equd    $13111151
                equd    $11310000
                equd    $11111511
                equd    $11511111
                equd    $73391111
                equd    $15111111
                equd    $11111111
                equd    $00000080
                equd    $00001331
                equd    $11110000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $16110000
                equd    $00001111
                equd    $44040000
                equd    $00804044
                equd    $40040600
                equd    $00000008
                equd    $22000000
                equd    $03002322
                equd    $11110110
                equd    $14111131
                equd    $03010044
                equd    $01101131
                equd    $44344474
                equd    $11001044
                equd    $00303111
                equd    $10110100
                equd    $10131100
                equd    $30001700
                equd    $01000030
                equd    $44344444
                equd    $14001043
                equd    $91303000
                equd    $17370100
                equd    $10731337
                equd    $37001000
                equd    $01001113
                equd    $11111111
                equd    $11001011
                equd    $00031131
                equd    $00007100
                equd    $10000007
                equd    $00300000
                equd    $11000003
                equd    $30110100
                equd    $00001000
                equd    $00030030
                equd    $00000171
                equd    $17003000
                equd    $11113100
                equd    $01100003
                equd    $30000700
                equd    $30001100
                equd    $71030000
                equd    $11030100
                equd    $10301111
                equd    $00003010
                equd    $01071003
                equd    $01071003
                equd    $30070030
                equd    $11110000
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $11161111
                equd    $11111111
                equd    $10111111
                equd    $00001111
                equd    $44441016
                equd    $00004044
                equd    $01000000
                equd    $10061661
                equd    $31010017
                equd    $00000000
                equd    $11600108
                equd    $11111011
                equd    $11113111
                equd    $11111370
                equd    $74000016
                equd    $31111144
                equd    $13111111
                equd    $11111110
                equd    $10001011
                equd    $01113101
                equd    $11101311
                equd    $08000000
                equd    $31010000
                equd    $13100111
                equd    $11310117
                equd    $37311111
                equd    $01113101
                equd    $11111310
                equd    $00000030
                equd    $31111131
                equd    $13107011
                equd    $00300111
                equd    $11000000
                equd    $11113111
                equd    $71111310
                equd    $00000030
                equd    $30000010
                equd    $03000000
                equd    $11310100
                equd    $12131131
                equd    $12121212
                equd    $12121312
                equd    $11311131
                equd    $11111113
                equd    $13111100
                equd    $00301212
                equd    $11030030
                equd    $01101111
                equd    $00001311
                equd    $11111131
                equd    $11111113
                equd    $11117011
                equd    $00391311
                equd    $07030000
                equd    $10111101
                equd    $03000008
                equd    $44444404
                equd    $11117147
                equd    $44447417
                equd    $00304044
                equd    $11710000
                equd    $17113333
                equd    $03000000
                equd    $07000030
                equd    $83383311
                equd    $00701133
                equd    $00300300
                equd    $30130100
                equd    $31030000
                equd    $03000010
                equd    $71000030
                equd    $00000033
                equd    $00173300
                equd    $00300300
                equd    $00371100
                equd    $73000000
                equd    $03000011
                equd    $13000030
                equd    $00000037
                equd    $00317300
                equd    $00300300
                equd    $00771300
                equd    $77000000
                equd    $03000031
                equd    $13000030
                equd    $00000037
                equd    $00317300
                equd    $00300300
                equd    $00371100
                equd    $73000000
                equd    $03000011
                equd    $01000030
                equd    $00007033
                equd    $00103307
                equd    $00300300
                equd    $37530100
                equd    $35730770
                equd    $03000010
                equd    $00000030
                equd    $73373351
                equd    $00001533
                equd    $00300300
                equd    $11010000
                equd    $10113333
                equd    $03000000
                equd    $00000039
                equd    $11110180
                equd    $00000810
                equd    $11310300
                equd    $00131111
                equd    $31000000
                equd    $11111111
                equd    $00000060
                equd    $10010000
                equd    $00000000
                equd    $00600600
                equd    $00000000
                equd    $00002002
                equd    $06000000
                equd    $00000060
                equd    $10010000
                equd    $00000000
                equd    $12120600
                equd    $12121212
                equd    $12122332
                equd    $12121212
                equd    $00007000
                equd    $13317000
                equd    $00000007
                equd    $12320007
                equd    $12121212
                equd    $21212112
                equd    $23212121
                equd    $00000730
                equd    $10010007
                equd    $00007000
                equd    $21210370
                equd    $21212121
                equd    $12122332
                equd    $12121212
                equd    $08780000
                equd    $13310070
                equd    $87800700
                equd    $12320000
                equd    $12121212
                equd    $21212112
                equd    $23212121
                equd    $00000730
                equd    $10010007
                equd    $00007000
                equd    $21210370
                equd    $21212121
                equd    $12122332
                equd    $12121212
                equd    $00007000
                equd    $13317000
                equd    $00000007
                equd    $12320007
                equd    $12121212
                equd    $21212112
                equd    $23212121
                equd    $00000030
                equd    $00090000
                equd    $00000000
                equd    $12120300
                equd    $12121212
                equd    $12121212
                equd    $12121212
                equd    $00700000
                equd    $07000007
                equd    $08000000
                equd    $11310070
                equd    $10111311
                equd    $11131111
                equd    $13111110
                equd    $03000030
                equd    $00000000
                equd    $00000003
                equd    $00030300
                equd    $04300000
                equd    $00300000
                equd    $30000000
                equd    $03000030
                equd    $00404000
                equd    $00000003
                equd    $00030300
                equd    $00340000
                equd    $44300004
                equd    $30444444
                equd    $43444434
                equd    $40000000
                equd    $00000003
                equd    $00000300
                equd    $00340080
                equd    $00300400
                equd    $30000000
                equd    $03111111
                equd    $40004000
                equd    $87000003
                equd    $01110307
                equd    $04300011
                equd    $00300004
                equd    $22121104
                equd    $03070007
                equd    $00400000
                equd    $11040003
                equd    $51112212
                equd    $04300011
                equd    $00300004
                equd    $22121104
                equd    $03015111
                equd    $40004000
                equd    $11040003
                equd    $70002277
                equd    $00340070
                equd    $00300400
                equd    $22222204
                equd    $03111111
                equd    $90700000
                equd    $22000703
                equd    $11112222
                equd    $11111111
                equd    $11111111
                equd    $11111111
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600000
                equd    $00000800
                equd    $00000000
                equd    $00000000
                equd    $11111161
                equd    $22221211
                equd    $12222221
                equd    $00702322
                equd    $00000000
                equd    $00000000
                equd    $03003000
                equd    $00000011
                equd    $07000200
                equd    $44740000
                equd    $11110370
                equd    $11333113
                equd    $00111111
                equd    $03100010
                equd    $30130000
                equd    $11221033
                equd    $08000011
                equd    $00000300
                equd    $10333713
                equd    $01111120
                equd    $13113111
                equd    $11110000
                equd    $11271011
                equd    $30000010
                equd    $00000300
                equd    $00000000
                equd    $00000000
                equd    $03003000
                equd    $09000000
                equd    $01000000
                equd    $32111131
                equd    $31112322
                equd    $13111111
                equd    $77301011
                equd    $03003000
                equd    $00003000
                equd    $00000300
                equd    $00002230
                equd    $31001301
                equd    $03001017
                equd    $22101100
                equd    $03111111
                equd    $10113100
                equd    $07008300
                equd    $00002200
                equd    $11110300
                equd    $11111111
                equd    $22111111
                equd    $22221111
                equd    $00000060
                equd    $00000000
                equd    $00000000
                equd    $00600600
                equd    $00000000
                equd    $00000000
                equd    $06000000
                equd    $31111111
                equd    $83801311
                equd    $11311111
                equd    $00041111
                equd    $03003000
                equd    $00002323
                equd    $40000030
                equd    $10111130
                equd    $00030000
                equd    $11110007
                equd    $11300311
                equd    $33011011
                equd    $00313333
                equd    $03111111
                equd    $10171130
                equd    $22223201
                equd    $71110031
                equd    $11300311
                equd    $33011011
                equd    $00313333
                equd    $03111111
                equd    $00000030
                equd    $44444400
                equd    $00000040
                equd    $80300300
                equd    $00003000
                equd    $00000002
                equd    $03080030
                equd    $30222232
                equd    $27220700
                equd    $22320000
                equd    $00302322
                equd    $02003000
                equd    $00002222
                equd    $03000030
                equd    $30111131
                equd    $22222200
                equd    $11310020
                equd    $00301311
                equd    $22723000
                equd    $70222222
                equd    $03000030
                equd    $30222232
                equd    $22222222
                equd    $22322022
                equd    $00702322
                equd    $22223200
                equd    $22222222
                equd    $07000930
                equd    $01061011
                equd    $10010010
                equd    $60100100
                equd    $11111101
                equd    $08111106
                equd    $11081111
                equd    $11116011
                equd    $10130130
                equd    $01101301
                equd    $31011031
                equd    $00300310
                equd    $13304413
                equd    $03310700
                equd    $03003144
                equd    $17118130
                equd    $31131131
                equd    $11711311
                equd    $11319310
                equd    $00311100
                equd    $13001113
                equd    $13110011
                equd    $01001031
                equd    $10030037
                equd    $00107300
                equd    $11311301
                equd    $33111100
                equd    $11331111
                equd    $13110011
                equd    $10130130
                equd    $01101301
                equd    $31011031
                equd    $00300310
                equd    $13000013
                equd    $00310700
                equd    $03003100
                equd    $13110130
                equd    $31131131
                equd    $11311311
                equd    $11310310
                equd    $00311100
                equd    $13001113
                equd    $13110011
                equd    $01001031
                equd    $10030030
                equd    $00100300
                equd    $11311301
                equd    $33111100
                equd    $11331111
                equd    $13110011
                equd    $00070030
                equd    $00073300
                equd    $70000033
                equd    $11310300
                equd    $11111111
                equd    $11111111
                equd    $13111111
                equd    $00000060
                equd    $11110100
                equd    $11111111
                equd    $00601111
                equd    $01000000
                equd    $12111111
                equd    $41444444
                equd    $00070060
                equd    $07001003
                equd    $10300200
                equd    $11110170
                equd    $21131111
                equd    $02111111
                equd    $11111130
                equd    $00700000
                equd    $07002003
                equd    $11300200
                equd    $11311111
                equd    $20111111
                equd    $02115111
                equd    $11111130
                equd    $70080030
                equd    $00002000
                equd    $00300207
                equd    $11110080
                equd    $20131111
                equd    $01515511
                equd    $13111111
                equd    $00000007
                equd    $07002003
                equd    $00000000
                equd    $11310300
                equd    $20111111
                equd    $00115111
                equd    $03000000
                equd    $00000730
                equd    $00002000
                equd    $00000007
                equd    $11110300
                equd    $20131111
                equd    $00515511
                equd    $03101111
                equd    $00000000
                equd    $00002073
                equd    $07100007
                equd    $11310310
                equd    $20111111
                equd    $00115111
                equd    $03103100
                equd    $00800030
                equd    $00009000
                equd    $31000000
                equd    $11110307
                equd    $11111111
                equd    $11111111
                equd    $11111111                       ;&&&& this dword should be the last of the level data ($2c99+$2300=$4f99) // there is some unnecessary padding here and in the level files
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equd    $00000000
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00                             ;end of level data is &4FE0 when saving level data, but all predefined level files are exactly 9011 bytes, and only 8960 (&2300) bytes are actually needed
.destAddr


                org     $5fd0
.init            lda     #$c8                            ;exec address of binary = &5FD0
                ldx     #$03
                jsr     OSBYTE                          ;*FX200,3
                lda     #$e1
                ldx     #$00
                jsr     OSBYTE                          ;*FX225,0 - ignores the function keys
                jmp     defineEnvelope

; &&&& unused disabled protection code
.clearUpperScreenMemory lda #$00
                tay
.clear           sta     $7c00,y
                sta     $7d00,y
                sta     $7e00,y
                sta     $7f00,y
                dey
                bne     clear
                ldx     #$23
.L5FF5           txa
                eor     L621D,x
                sta     $7c28,x
                sta     $7c50,x
                dex
                bpl     L5FF5
                ldx     #$1b
.L6004           lda     L6241,x
                sta     $7cce,x
                sta     $7d1e,x
                lda     L625D,x
                sta     $7cf6,x
                dex
                bpl     L6004
                lda     timer1Lo
                sta     L61E8
                eor     L61E9
                sta     L61E9
                inc     L61E9
                jsr     L61A2
                and     #$01
                asl     a
                sta     L61EE
                clc
                adc     #$30
                sta     $7c4d
                sta     $7c75
                jsr     L61A2
                jsr     __times10_16bit
                lda     $71
                sta     L61F0
                clc
                adc     #$30
                sta     $7c46
                sta     $7c6e
                jsr     L61A2
                jsr     times16_16bit
                lda     $71
                and     #$0f
                sta     L61EF
                clc
                adc     #$41
                sta     $7c44
                sta     $7c6c
                ldy     L61EE
                beq     L607A
.L6066           lda     L6096+1
                clc
                adc     #$a0
                sta     L6096+1
                lda     L6096+2
                adc     #$00
                sta     L6096+2
                dey
                bne     L6066
.L607A           ldy     L61EF
                beq     L6093
.L607F           lda     L6096+1
                clc
                adc     #$0a
                sta     L6096+1
                lda     L6096+2
                adc     #$00
                sta     L6096+2
                dey
                bne     L607F
.L6093           ldy     L61F0
.L6096           lda     falseLabel1,y
                sta     L61F1
.L609C           jsr     L617C
                ldx     #$c9                            ;key code RETURN (eor &80)
                lda     #$79
                jsr     OSBYTE                          ;scan for RETURN key
                cpx     #$00
                bmi     L6100                           ;RETURN was pressed
                ldx     L61EB
                beq     L609C
                lda     #$06
                sta     L61EC
                dex
                lda     L61FD,x
                tax
                ldy     L61ED
                lda     L61FD,y
                tay
.L60C0           lda     L6241,x
                sta     $7de6,y
                sta     $7e0e,y
                sta     $7e36,y
                inx
                iny
                dec     L61EC
                bpl     L60C0
                dec     L61EB
                lda     L61EB
                ldy     L61ED
                beq     L60E3
.L60DE           asl     a
                asl     a
                dey
                bne     L60DE
.L60E3           ldy     L61ED
                sta     L61F4,y
                inc     L61ED
                lda     L61ED
                and     #$03
                sta     L61ED
.L60F4           lda     #$7a
                jsr     OSBYTE                          ;scan key (>16)
                cpx     #$ff
                bne     L60F4
                jmp     L609C

.L6100           ldy     #$03
                lda     #$00
.L6104           ora     L61F4,y
                dey
                bpl     L6104
                sta     keyCodes1to4-1
                cmp     L61F1
                bne     L6171
.defineEnvelope  ldx     #<envelope1
                ldy     #>envelope1
                lda     #$08
                jsr     OSWORD                          ;define envelope
                ldy     #$0d
.crtcLoop        sty     crtcAddressRegister
                lda     crtcSetupData,y
                sta     crtcAddressWrite
                dey
                bpl     crtcLoop
                ldx     #$d8
                lda     #$9a
                jsr     OSBYTE                          ;OSBYTE 154 - Write to Video ULA's Video Control Register: Set MODE 1 like characteristics
.setColourPalette ldx    paletteDataOswordBlock
                lda     palettePhysicalColours,x
                sta     paletteDataOswordBlock+1
                ldx     #<paletteDataOswordBlock
                ldy     #>paletteDataOswordBlock
                lda     #$0c
                jsr     OSWORD                          ;set palette
                inc     paletteDataOswordBlock
                lda     paletteDataOswordBlock
                cmp     #$04
                bne     setColourPalette                ;loop to set colours 0,1,2,3 to black,red,cyan,white
                ldy     #$00
.sm_srcAddr  lda loadAddr,y

.sm_destAddr     sta     main,y                          ;selfmod
                iny
                bne     sm_srcAddr
                inc     sm_destAddr+2
                inc     sm_srcAddr+2
                lda     sm_srcAddr+2
                cmp     #$60                            ;&&&& copying up to &6000 // may need to change this if the program size changes
                bne     sm_srcAddr
                jmp     main                            ;jump to main program

.paletteDataOswordBlock equb $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.palettePhysicalColours equb $00                         ;black
                equb    $01                             ;red
                equb    $06                             ;cyan
                equb    $07                             ;white

; &&&& unused disabled protection code
.L6171           dec     L61F3
                bmi     L6179
                jmp     L60F4

.L6179           jmp     $d9cd                           ;reset

.L617C           ldx     #$00
.L617E           stx     L61EB
                lda     keyCodes1to4,x
                tax
                lda     #$79
                jsr     OSBYTE                          ;key scan
                cpx     #$00
                bpl     L6191                           ;key was not pressed
                jmp     L619E

.L6191           ldx     L61EB
                inx
                cpx     #$04
                bne     L617E
                lda     #$ff
                sta     L61EB
.L619E           inc     L61EB
                rts

.L61A2           lda     L61E8
                asl     a
                rol     L61E9
                rol     L61E8
                lda     L61E8
                rts

.__times10_16bit ldx     #$00
                stx     $71
                sta     $70
                asl     $70
                rol     $71
                lda     $70
                sta     $72
                lda     $71
                sta     $73
                asl     $70
                rol     $71
                asl     $70
                rol     $71
                lda     $70
                clc
                adc     $72
                sta     $70
                lda     $71
                adc     $73
                sta     $71
                rts

.times16_16bit   ldx     #$00
                stx     $71
                sta     $70
                ldx     #$03
.shiftLeft       asl     $70
                rol     $71
                dex
                bpl     shiftLeft
                rts

.L61E8           equb    $00
.L61E9           equb    $bd
                equb    $a4
.L61EB           equb    $00
.L61EC           equb    $00
.L61ED           equb    $00
.L61EE           equb    $00
.L61EF           equb    $00
.L61F0           equb    $00
.L61F1           equb    $00
                equb    $00
.L61F3           equb    $01
.L61F4           equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
.keyCodes1to4    equb    $b0                             ;1
                equb    $b1                             ;2
                equb    $91                             ;3
                equb    $92                             ;4
.L61FD           equb    $00
                equb    $07
                equb    $0e
                equb    $15
.envelope1       equb    $01
                equb    $01
                equb    $00
                equb    $00
                equb    $00
                equb    $01
                equb    $01
                equb    $01
                equb    $3c
                equb    $fc
                equb    $fe
                equb    $fe
                equb    $78
                equb    $5a
.crtcSetupData   equb    $7f                             ;includes a custom MODE 1
                equb    $46
                equb    $5c
                equb    $28
                equb    $26
                equb    $00
                equb    $16
                equb    $1d
                equb    $01
                equb    $07
                equb    $3f
                equb    $00
                equb    $09
                equb    $fc
; &&&& three unneeded tables used by the disabled protection code
.L621D           equb    $84
                equb    $9c
                equb    $81
                equb    $8e
                equb    $41
                equb    $4b
                equb    $52
                equb    $42
                equb    $5a
                equb    $29
                equb    $49
                equb    $44
                equb    $48
                equb    $48
                equb    $2e
                equb    $4e
                equb    $44
                equb    $31
                equb    $5e
                equb    $5c
                equb    $57
                equb    $54
                equb    $42
                equb    $5e
                equb    $57
                equb    $57
                equb    $3a
                equb    $3b
                equb    $3c
                equb    $3d
                equb    $3e
                equb    $3f
                equb    $70
                equb    $60
                equb    $65
                equb    $66
.L6241           equb    $81
                equb    $9d
                equb    $87
                equb    $20
                equb    $20
                equb    $20
                equb    $9c
                equb    $82
                equb    $9d
                equb    $87
                equb    $20
                equb    $20
                equb    $20
                equb    $9c
                equb    $83
                equb    $9d
                equb    $87
                equb    $20
                equb    $20
                equb    $20
                equb    $9c
                equb    $85
                equb    $9d
                equb    $87
                equb    $20
                equb    $20
                equb    $20
                equb    $9c
.L625D           equb    $81
                equb    $9d
                equb    $87
                equb    $31
                equb    $20
                equb    $20
                equb    $9c
                equb    $82
                equb    $9d
                equb    $87
                equb    $32
                equb    $20
                equb    $20
                equb    $9c
                equb    $83
                equb    $9d
                equb    $87
                equb    $33
                equb    $20
                equb    $20
                equb    $9c
                equb    $85
                equb    $9d
                equb    $87
                equb    $34
                equb    $20
                equb    $20
                equb    $9c
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
                equb    $00
equb 0
.lrEnd
copyblock init, lrEnd, destAddr
LEN=lrEnd-(init-destAddr)
puttext "!BOOT.txt", "!BOOT", 0, 0
save "NEWLODE", lrStart, LEN, init, loadAddr
;

